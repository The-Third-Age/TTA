# Remove this line to have the validator check for strings in localisation
# Audax Validator "!" Ignore_1004

# World Bank Events: {
# 99000 - 99799 }

# Generic Cleanup
country_event = {
	id = 99000
	picture = "production"
	title = "Generic Cleanup"
	desc = "EVTDESC99000"
	
	is_triggered_only = yes
	
	option = {
		name = "Fix it please"
		
		# Social (Burgher) Reforms Caching {
		# Clearing the old cached values
		any_country = {
			clr_country_flag = reforms_cache_had_granted_exclusive_tr
			clr_country_flag = reforms_cache_had_limited_exclusive_tr
			clr_country_flag = reforms_cache_had_abolished_exclusive_tr
			clr_country_flag = reforms_cache_had_privileged_state_supplies
			clr_country_flag = reforms_cache_had_allowed_state_supplies
			clr_country_flag = reforms_cache_had_restricted_state_supplies
			clr_country_flag = reforms_cache_had_independent_cities
			clr_country_flag = reforms_cache_had_chartered_cities
			clr_country_flag = reforms_cache_had_territorial_cities
			clr_country_flag = reforms_cache_had_royal_cities
			clr_country_flag = reforms_cache_had_no_pensions
			clr_country_flag = reforms_cache_had_trinket_pensions
			clr_country_flag = reforms_cache_had_low_pensions
			clr_country_flag = reforms_cache_had_acceptable_pensions
			clr_country_flag = reforms_cache_had_good_pensions
			clr_country_flag = reforms_cache_had_hereditary
			clr_country_flag = reforms_cache_had_appointment
			clr_country_flag = reforms_cache_had_guild_school
		}
		
		# Updating the cached values
		any_country = {
			limit = {
				has_country_flag = reforms_has_granted_exclusive_tr
			}
			set_country_flag = reforms_cache_had_granted_exclusive_tr
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_limited_exclusive_tr
			}
			set_country_flag = reforms_cache_had_limited_exclusive_tr
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_abolished_exclusive_tr
			}
			set_country_flag = reforms_cache_had_abolished_exclusive_tr
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_privileged_state_supplies
			}
			set_country_flag = reforms_cache_had_privileged_state_supplies
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_allowed_state_supplies
			}
			set_country_flag = reforms_cache_had_allowed_state_supplies
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_restricted_state_supplies
			}
			set_country_flag = reforms_cache_had_restricted_state_supplies
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_independent_cities
			}
			set_country_flag = reforms_cache_had_independent_cities
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_chartered_cities
			}
			set_country_flag = reforms_cache_had_chartered_cities
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_territorial_cities
			}
			set_country_flag = reforms_cache_had_territorial_cities
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_royal_cities
			}
			set_country_flag = reforms_cache_had_royal_cities
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_no_pensions
			}
			set_country_flag = reforms_cache_had_no_pensions
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_trinket_pensions
			}
			set_country_flag = reforms_cache_had_trinket_pensions
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_low_pensions
			}
			set_country_flag = reforms_cache_had_low_pensions
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_acceptable_pensions
			}
			set_country_flag = reforms_cache_had_acceptable_pensions
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_good_pensions
			}
			set_country_flag = reforms_cache_had_good_pensions
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_hereditary
			}
			set_country_flag = reforms_cache_had_hereditary
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_appointment
			}
			set_country_flag = reforms_cache_had_appointment
		}
		
		any_country = {
			limit = {
				has_country_flag = reforms_has_guild_school
			}
			set_country_flag = reforms_cache_had_guild_school
		}
		
		# Clearing the old values
		any_country = {
			clr_country_flag = reforms_has_granted_exclusive_tr
			clr_country_flag = reforms_has_limited_exclusive_tr
			clr_country_flag = reforms_has_abolished_exclusive_tr
			clr_country_flag = reforms_has_privileged_state_supplies
			clr_country_flag = reforms_has_allowed_state_supplies
			clr_country_flag = reforms_has_restricted_state_supplies
			clr_country_flag = reforms_has_independent_cities
			clr_country_flag = reforms_has_chartered_cities
			clr_country_flag = reforms_has_territorial_cities
			clr_country_flag = reforms_has_royal_cities
			clr_country_flag = reforms_has_no_pensions
			clr_country_flag = reforms_has_trinket_pensions
			clr_country_flag = reforms_has_low_pensions
			clr_country_flag = reforms_has_acceptable_pensions
			clr_country_flag = reforms_has_good_pensions
			clr_country_flag = reforms_has_hereditary
			clr_country_flag = reforms_has_appointment
			clr_country_flag = reforms_has_guild_school
		}
		
		# Caching the current value for next time this event fires
		any_country = {
			limit = {
				exclusive_trading_rights = granted_exclusive_tr
			}
			set_country_flag = reforms_has_granted_exclusive_tr
		}
		
		any_country = {
			limit = {
				exclusive_trading_rights = limited_exclusive_tr
			}
			set_country_flag = reforms_has_limited_exclusive_tr
		}
		
		any_country = {
			limit = {
				exclusive_trading_rights = abolished_exclusive_tr
			}
			set_country_flag = reforms_has_abolished_exclusive_tr
		}
		
		any_country = {
			limit = {
				state_supplies_monopoly = privileged_state_supplies
			}
			set_country_flag = reforms_has_privileged_state_supplies
		}
		
		any_country = {
			limit = {
				state_supplies_monopoly = allowed_state_supplies
			}
			set_country_flag = reforms_has_allowed_state_supplies
		}
		
		any_country = {
			limit = {
				state_supplies_monopoly = restricted_state_supplies
			}
			set_country_flag = reforms_has_restricted_state_supplies
		}
		
		any_country = {
			limit = {
				city_jurisdiction = independent_cities
			}
			set_country_flag = reforms_has_independent_cities
		}
		
		any_country = {
			limit = {
				city_jurisdiction = chartered_cities
			}
			set_country_flag = reforms_has_chartered_cities
		}
		
		any_country = {
			limit = {
				city_jurisdiction = territorial_cities
			}
			set_country_flag = reforms_has_territorial_cities
		}
		
		any_country = {
			limit = {
				city_jurisdiction = royal_cities
			}
			set_country_flag = reforms_has_royal_cities
		}
		
		any_country = {
			limit = {
				pensions = no_pensions
			}
			set_country_flag = reforms_has_no_pensions
		}
		
		any_country = {
			limit = {
				pensions = trinket_pensions
			}
			set_country_flag = reforms_has_trinket_pensions
		}
		
		any_country = {
			limit = {
				pensions = low_pensions
			}
			set_country_flag = reforms_has_low_pensions
		}
		
		any_country = {
			limit = {
				pensions = acceptable_pensions
			}
			set_country_flag = reforms_has_acceptable_pensions
		}
		
		any_country = {
			limit = {
				pensions = good_pensions
			}
			set_country_flag = reforms_has_good_pensions
		}
		
		any_country = {
			limit = {
				apprenticeship = hereditary
			}
			set_country_flag = reforms_has_hereditary
		}
		
		any_country = {
			limit = {
				apprenticeship = appointment
			}
			set_country_flag = reforms_has_appointment
		}
		
		any_country = {
			limit = {
				apprenticeship = guild_school
			}
			set_country_flag = reforms_has_guild_school
		}
		# }
		
		# Refire the cleanup event next month
		country_event = { id = 99000 days = 30 }
	}
}

# DAL Flavor Cleanup
country_event = {
	id = 99001
	picture = "production"
	title = "DAL Flavor Cleanup"
	desc = "EVTDESC99001"
	
	is_triggered_only = yes
	
	option = {
		name = "Fix it please"
		
		# If turned in a Republic of some kind, Bard's line no longer rules
		random_country = {
			limit = {
				OR = {
					nationalvalue = bard_i
					nationalvalue = bain_i
					nationalvalue = brand_i
					nationalvalue = bard_ii
					nationalvalue = regency
				}
				OR = {
					government = democracy
					government = hobbit_realm
					government = northmen_democracy
				}
			}
			
			country_event = 3508
		}
		
		# Building Mere's End Boat Life {
		random_country = { # Boat lift started building, then province switched hands
			limit = {
				has_global_flag = DAL_meres_end_boat_lift_constructing
				owns = 648
				NOT = { has_global_flag = DAL_meres_end_boat_lift_constructed }
				NOT = { has_country_modifier = meres_end_constructing_boat_lift }
			}
			add_country_modifier = { name = meres_end_constructing_boat_lift duration = -1 }
		}
		random_country = { # Lost the province since it started building or it finished building
			limit = {
				has_global_flag = DAL_meres_end_boat_lift_constructing
				has_country_modifier = meres_end_constructing_boat_lift
				OR = {
					NOT = { owns = 648 }
					has_global_flag = DAL_meres_end_boat_lift_constructed
				}
			}
			remove_country_modifier = meres_end_constructing_boat_lift
		}
		random_owned = { # Finished building, but one of the affected provinces is missing the modifier
			any_neighbor_province = {
				limit = {
					owner = { has_global_flag = DAL_meres_end_boat_lift_constructed }
					OR = {
						province_id = 649
						province_id = 653
						province_id = 654
					}
					NOT = { has_province_modifier = meres_end_increased_trade }
				}
				add_province_modifier = { name = meres_end_increased_trade duration = -1 }
			}
		}
		# }
		
		# Celduin Pirates {
		random_owned = {
			limit = {
				owner = { any_neighbor_country = { has_country_modifier = funding_celduin_pirates } }
			}
			any_neighbor_province = {
				limit = {
					OR = {
						province_id = 140 # Holmgierstadur
						province_id = 524 # Merrborg
						province_id = 526 # Fulginhaim
						province_id = 528 # Baulaborg
						province_id = 530 # Ardruiga Vale
						province_id = 532 # Ilanin
						province_id = 536 # Far Bank
						province_id = 537 # Tretoborg
						province_id = 538 # Halies
						province_id = 540 # Nagy
						province_id = 543 # Padvan
						province_id = 544 # Szrel-Kain
						province_id = 554 # Szrel-Arkasa
						province_id = 622 # Winterion Iaur
						province_id = 625 # Ilpar
						province_id = 626 # Sarad
						province_id = 628 # Kardavan
						province_id = 629 # Lar-Sagra
						province_id = 643 # Naertheiaborg
						province_id = 644 # Myrrborg
						province_id = 645 # Kaupaborg
						province_id = 646 # Iach Celduin
						province_id = 647 # Riverrun
						province_id = 648 # Londaroth
						province_id = 702 # Tauraelin
						province_id = 1404 # Tundera Var
						province_id = 1405 # Burh Salenin
						province_id = 1406 # Durannon
						province_id = 1431 # Esgaldor
					}
					NOT = { has_crime = celduin_pirates }
					NOT = { owner = { primary_culture = rivermen } }
				}
				add_crime = celduin_pirates
			}
		}
		
		random_owned = {
			limit = {
				NOT = { owner = { any_neighbor_country = { has_country_modifier = funding_celduin_pirates } } }
			}
			any_neighbor_province = {
				limit = {
					has_crime = celduin_pirates
				}
				add_crime = no_crime
			}
		}
		
		any_country = {
			limit = {
				any_owned_province = { has_crime = celduin_pirates }
				NOT = { has_country_flag = DAL_alerted_about_pirates }
			}
			country_event = 50915
			set_country_flag = DAL_alerted_about_pirates
		}
		# }
		
		# Marsh Wights
		random_owned = {
			any_neighbor_province = {
				limit = {
					OR = {
						has_crime = marsh_wights
						has_crime = hunting_marsh_wights
					}
					OR = {
						owned_by = LMW
						NOT = { is_core = LMW }
					}
				}
				add_crime = no_crime
			}
		}
		
		# Trading Mechanic Modifier Changes {
		# Remove trading modifiers and flags if DAL doesn't exist or it doesn't own Esgaroth
		random_owned = {
			limit = {
				owner = {
					OR = {
						NOT = { exists = DAL }
						NOT = { DAL = { owns = 654 } }
					}
				}
			}
			owner = {
				any_country = {
					remove_country_modifier = trading_with_DAL
					clr_country_flag = rejected_trade_with_DAL
				}
			}
		}
		
		# Remove trading modifiers and flags from nonexistant countries
		any_country = {
			limit = {
				exists = no
				OR = {
					has_country_modifier = trading_with_DAL
					has_country_flag = rejected_trade_with_DAL
				}
			}
			remove_country_modifier = trading_with_DAL
			clr_country_flag = rejected_trade_with_DAL
		}
		
		# Remove trading modifiers and flags from existing realms that no longer fit the requirements
		any_country = {
			limit = {
				has_country_modifier = trading_with_DAL
				OR = {
					is_vassal = yes
					war_with = DAL
					AND = {
						DAL = { good_evil_alignment = good_alignment }
						good_evil_alignment = evil_alignment
					}
					AND = {
						DAL = { good_evil_alignment = evil_alignment }
						good_evil_alignment = good_alignment
					}
				}
			}
			remove_country_modifier = trading_with_DAL
		}
		
		# Recalculate the number of realms trading
		set_variable = { which = esgaroth_trading value = 0 }
		
		any_country = { # Do not have to worry about erroneous realms having the modifier. The modifier will have already been removed
			limit = {
				has_country_modifier = trading_with_DAL
			}
			FOR = { change_variable = { which = esgaroth_trading value = 1 } }
		}
		
		random_owned = {
			random_neighbor_province = {
				limit = {
					province_id = 654 # Esgaroth
					OR = {
						AND = { # Not trading with anyone
							OR = {
								has_province_modifier = esgaroth_trade_i
								has_province_modifier = esgaroth_trade_ii
								has_province_modifier = esgaroth_trade_iii
								has_province_modifier = esgaroth_trade_iv
								has_province_modifier = esgaroth_trade_v
							}
							NOT = { owner = { FOR = { check_variable = { which = esgaroth_trading value = 0.1 } } } }
						}
						AND = { # Doesn't have the level 1 modifier when trading with only 1 realm
							NOT = { has_province_modifier = esgaroth_trade_i }
							owner = {
								FOR = {
									check_variable = { which = esgaroth_trading value = 0.9 }
									NOT = { check_variable = { which = esgaroth_trading value = 1.1 } }
								}
							}
						}
						AND = { # Doesn't have the level 2 modifier when trading with 2-3 realms
							NOT = { has_province_modifier = esgaroth_trade_ii }
							owner = {
								FOR = {
									check_variable = { which = esgaroth_trading value = 1.9 }
									NOT = { check_variable = { which = esgaroth_trading value = 3.1 } }
								}
							}
						}
						AND = { # Doesn't have the level 3 modifier when trading with 4-5 realms
							NOT = { has_province_modifier = esgaroth_trade_iii }
							owner = {
								FOR = {
									check_variable = { which = esgaroth_trading value = 3.9 }
									NOT = { check_variable = { which = esgaroth_trading value = 5.1 } }
								}
							}
						}
						AND = { # Doesn't have the level 4 modifier when trading with 6-9 realms
							NOT = { has_province_modifier = esgaroth_trade_iv }
							owner = {
								FOR = {
									check_variable = { which = esgaroth_trading value = 5.9 }
									NOT = { check_variable = { which = esgaroth_trading value = 9.1 } }
								}
							}
						}
						AND = { # Doesn't have the level 5 modifier when trading with 10+ realms
							NOT = { has_province_modifier = esgaroth_trade_v }
							owner = {
								FOR = { check_variable = { which = esgaroth_trading value = 9.9 } }
							}
						}
					}
				}
				# Audax Validator "." Ignore_1009
				province_event = {
					# Audax Validator "." Ignore_1006
					id = 50928
				}
			}
		}
		
		# Now that the counting variable is updated, update the dynamic text
		country_event = 200000
		# }
		
		# Merchants vs Fishers Guild {
		# Updating the variable based upon the previous reform
		
		# TODO: Split out each one of these change variables into one random_country block -- if multiple triggers in the OR fire (i.e., multiple reforms changing at once, the variable will only be updated once for that level, rather than twice
		random_country = {
			limit = {
				tag = DAL
				NOT = { has_country_flag = DAL_merchant_supported_by_realm }
				NOT = { has_country_flag = DAL_guild_supported_by_realm }
				OR = {
					AND = {
						has_country_flag = reforms_cache_had_good_pensions
						pensions = no_pensions
					}
				}
			}
			change_variable = { which = DAL_merchants_fishers_bop value = -8 } # Shift 8 in favor of the Merchants
		}
		
		random_country = {
			limit = {
				tag = DAL
				NOT = { has_country_flag = DAL_merchant_supported_by_realm }
				NOT = { has_country_flag = DAL_guild_supported_by_realm }
				OR = {
					AND = {
						has_country_flag = reforms_cache_had_royal_cities
						city_jurisdiction = independent_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_acceptable_pensions
						pensions = no_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_good_pensions
						pensions = trinket_pensions
					}
				}
			}
			change_variable = { which = DAL_merchants_fishers_bop value = -6 } # Shift 6 in favor of the Merchants
		}
		
		random_country = {
			limit = {
				tag = DAL
				NOT = { has_country_flag = DAL_merchant_supported_by_realm }
				NOT = { has_country_flag = DAL_guild_supported_by_realm }
				OR = {
					AND = {
						has_country_flag = reforms_cache_had_abolished_exclusive_tr
						exclusive_trading_rights = granted_exclusive_tr
					}
					AND = {
						has_country_flag = reforms_cache_had_restricted_state_supplies
						state_supplies_monopoly = privileged_state_supplies
					}
					AND = {
						has_country_flag = reforms_cache_had_territorial_cities
						city_jurisdiction = independent_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_royal_cities
						city_jurisdiction = chartered_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_low_pensions
						pensions = no_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_acceptable_pensions
						pensions = trinket_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_good_pensions
						pensions = low_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_guild_school
						apprenticeship = hereditary
					}
				}
			}
			change_variable = { which = DAL_merchants_fishers_bop value = -4 } # Shift 4 in favor of the Merchants
		}
		
		random_country = {
			limit = {
				tag = DAL
				NOT = { has_country_flag = DAL_merchant_supported_by_realm }
				NOT = { has_country_flag = DAL_guild_supported_by_realm }
				OR = {
					AND = {
						has_country_flag = reforms_cache_had_limited_exclusive_tr
						exclusive_trading_rights = granted_exclusive_tr
					}
					AND = {
						has_country_flag = reforms_cache_had_abolished_exclusive_tr
						exclusive_trading_rights = limited_exclusive_tr
					}
					AND = {
						has_country_flag = reforms_cache_had_allowed_state_supplies
						state_supplies_monopoly = privileged_state_supplies
					}
					AND = {
						has_country_flag = reforms_cache_had_restricted_state_supplies
						state_supplies_monopoly = allowed_state_supplies
					}
					AND = {
						has_country_flag = reforms_cache_had_chartered_cities
						city_jurisdiction = independent_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_territorial_cities
						city_jurisdiction = chartered_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_royal_cities
						city_jurisdiction = territorial_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_trinket_pensions
						pensions = no_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_low_pensions
						pensions = trinket_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_acceptable_pensions
						pensions = low_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_good_pensions
						pensions = acceptable_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_appointment
						apprenticeship = hereditary
					}
					AND = {
						has_country_flag = reforms_cache_had_guild_school
						apprenticeship = appointment
					}
				}
			}
			change_variable = { which = DAL_merchants_fishers_bop value = -2 } # Shift 2 in favor of the Merchants
		}
		
		random_country = {
			limit = {
				tag = DAL
				NOT = { has_country_flag = DAL_merchant_supported_by_realm }
				NOT = { has_country_flag = DAL_guild_supported_by_realm }
				OR = {
					AND = {
						has_country_flag = reforms_cache_had_granted_exclusive_tr
						exclusive_trading_rights = limited_exclusive_tr
					}
					AND = {
						has_country_flag = reforms_cache_had_limited_exclusive_tr
						exclusive_trading_rights = abolished_exclusive_tr
					}
					AND = {
						has_country_flag = reforms_cache_had_privileged_state_supplies
						state_supplies_monopoly = allowed_state_supplies
					}
					AND = {
						has_country_flag = reforms_cache_had_allowed_state_supplies
						state_supplies_monopoly = restricted_state_supplies
					}
					AND = {
						has_country_flag = reforms_cache_had_independent_cities
						city_jurisdiction = chartered_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_chartered_cities
						city_jurisdiction = territorial_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_territorial_cities
						city_jurisdiction = royal_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_no_pensions
						pensions = trinket_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_trinket_pensions
						pensions = low_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_low_pensions
						pensions = acceptable_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_acceptable_pensions
						pensions = good_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_hereditary
						apprenticeship = appointment
					}
					AND = {
						has_country_flag = reforms_cache_had_appointment
						apprenticeship = guild_school
					}
				}
			}
			change_variable = { which = DAL_merchants_fishers_bop value = 2 } # Shift 2 in favor of the Fisher's Guild
		}
		
		random_country = {
			limit = {
				tag = DAL
				NOT = { has_country_flag = DAL_merchant_supported_by_realm }
				NOT = { has_country_flag = DAL_guild_supported_by_realm }
				OR = {
					AND = {
						has_country_flag = reforms_cache_had_granted_exclusive_tr
						exclusive_trading_rights = abolished_exclusive_tr
					}
					AND = {
						has_country_flag = reforms_cache_had_privileged_state_supplies
						state_supplies_monopoly = restricted_state_supplies
					}
					AND = {
						has_country_flag = reforms_cache_had_independent_cities
						city_jurisdiction = territorial_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_chartered_cities
						city_jurisdiction = royal_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_no_pensions
						pensions = low_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_trinket_pensions
						pensions = acceptable_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_low_pensions
						pensions = good_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_hereditary
						apprenticeship = guild_school
					}
				}
			}
			change_variable = { which = DAL_merchants_fishers_bop value = 4 } # Shift 4 in favor of the Fisher's Guild
		}
		
		random_country = {
			limit = {
				tag = DAL
				NOT = { has_country_flag = DAL_merchant_supported_by_realm }
				NOT = { has_country_flag = DAL_guild_supported_by_realm }
				OR = {
					AND = {
						has_country_flag = reforms_cache_had_independent_cities
						city_jurisdiction = royal_cities
					}
					AND = {
						has_country_flag = reforms_cache_had_no_pensions
						pensions = acceptable_pensions
					}
					AND = {
						has_country_flag = reforms_cache_had_trinket_pensions
						pensions = good_pensions
					}
				}
			}
			change_variable = { which = DAL_merchants_fishers_bop value = 6 } # Shift 6 in favor of the Fisher's Guild
		}
		
		random_country = {
			limit = {
				tag = DAL
				NOT = { has_country_flag = DAL_merchant_supported_by_realm }
				NOT = { has_country_flag = DAL_guild_supported_by_realm }
				OR = {
					AND = {
						has_country_flag = reforms_cache_had_no_pensions
						pensions = good_pensions
					}
				}
			}
			change_variable = { which = DAL_merchants_fishers_bop value = 8 } # Shift 8 in favor of the Fisher's Guild
		}
		
		# Detecting if the modifier needs to change
		random_country = {
			limit = {
				tag = DAL
				OR = {
					AND = { # Merchants have been supported by the realm, or the bop is 10+ in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_10 }
						OR = {
							has_country_flag = DAL_merchant_supported_by_realm
							NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -9.9 } }
						}
					}
					AND = { # The bop is 9 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_9 }
						check_variable = { which = DAL_merchants_fishers_bop value = -9.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -8.9 } }
					}
					AND = { # The bop is 8 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_8 }
						check_variable = { which = DAL_merchants_fishers_bop value = -8.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -7.9 } }
					}
					AND = { # The bop is 7 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_7 }
						check_variable = { which = DAL_merchants_fishers_bop value = -7.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -6.9 } }
					}
					AND = { # The bop is 6 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_6 }
						check_variable = { which = DAL_merchants_fishers_bop value = -6.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -5.9 } }
					}
					AND = { # The bop is 5 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_5 }
						check_variable = { which = DAL_merchants_fishers_bop value = -5.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -4.9 } }
					}
					AND = { # The bop is 4 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_4 }
						check_variable = { which = DAL_merchants_fishers_bop value = -4.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -3.9 } }
					}
					AND = { # The bop is 3 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_3 }
						check_variable = { which = DAL_merchants_fishers_bop value = -3.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -2.9 } }
					}
					AND = { # The bop is 2 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_2 }
						check_variable = { which = DAL_merchants_fishers_bop value = -2.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -1.9 } }
					}
					AND = { # The bop is 1 in favor of the Merchants
						NOT = { has_country_modifier = DAL_merchant_power_1 }
						check_variable = { which = DAL_merchants_fishers_bop value = -1.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = -0.9 } }
					}
					AND = { # The bop is even
						NOT = { has_country_modifier = DAL_merchant_guild_balanced }
						check_variable = { which = DAL_merchants_fishers_bop value = -0.1 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 0.1 } }
					}
					AND = { # The bop is 1 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_1 }
						check_variable = { which = DAL_merchants_fishers_bop value = 0.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 1.1 } }
					}
					AND = { # The bop is 2 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_2 }
						check_variable = { which = DAL_merchants_fishers_bop value = 1.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 2.1 } }
					}
					AND = { # The bop is 3 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_3 }
						check_variable = { which = DAL_merchants_fishers_bop value = 2.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 3.1 } }
					}
					AND = { # The bop is 4 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_4 }
						check_variable = { which = DAL_merchants_fishers_bop value = 3.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 4.1 } }
					}
					AND = { # The bop is 5 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_5 }
						check_variable = { which = DAL_merchants_fishers_bop value = 4.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 5.1 } }
					}
					AND = { # The bop is 6 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_6 }
						check_variable = { which = DAL_merchants_fishers_bop value = 5.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 6.1 } }
					}
					AND = { # The bop is 7 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_7 }
						check_variable = { which = DAL_merchants_fishers_bop value = 6.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 7.1 } }
					}
					AND = { # The bop is 8 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_8 }
						check_variable = { which = DAL_merchants_fishers_bop value = 7.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 8.1 } }
					}
					AND = { # The bop is 9 in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_9 }
						check_variable = { which = DAL_merchants_fishers_bop value = 8.9 }
						NOT = { check_variable = { which = DAL_merchants_fishers_bop value = 9.1 } }
					}
					AND = { # The bop is 10+ in favor of the Fisher's Guild
						NOT = { has_country_modifier = DAL_guild_power_10 }
						OR = {
							check_variable = { which = DAL_merchants_fishers_bop value = 9.9 }
							has_country_flag = DAL_guild_supported_by_realm
						}
					}
				}
			}
			country_event = 50949
		}
		# }
		
		# Refire the cleanup event next month
		country_event = { id = 99001 days = 30 }
	}
}