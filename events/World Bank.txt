# Remove this line to have the validator check for strings in localisation
# Audax Validator "!" Ignore_1004

# World Bank Events: {
# 99000 - 99799 }

# DAL Flavor Cleanup
country_event = {
	id = 99001
	picture = "production"
	title = "DAL Flavor Cleanup"
	desc = "EVTDESC99001"
	
	is_triggered_only = yes
	
	option = {
		name = "Fix it please"
		
		# If turned in a Republic of some kind, Bard's line no longer rules
		random_country = {
			limit = {
				OR = {
					nationalvalue = bard_i
					nationalvalue = bain_i
					nationalvalue = brand_i
					nationalvalue = bard_ii
					nationalvalue = regency
				}
				OR = {
					government = democracy
					government = hobbit_realm
					government = northmen_democracy
				}
			}
			
			country_event = 3508
		}
		
		# Building Mere's End Boat Life {
		random_country = { # Boat lift started building, then province switched hands
			limit = {
				has_global_flag = DAL_meres_end_boat_lift_constructing
				owns = 648
				NOT = { has_global_flag = DAL_meres_end_boat_lift_constructed }
				NOT = { has_country_modifier = meres_end_constructing_boat_lift }
			}
			add_country_modifier = { name = meres_end_constructing_boat_lift duration = -1 }
		}
		random_country = { # Lost the province since it started building or it finished building
			limit = {
				has_global_flag = DAL_meres_end_boat_lift_constructing
				has_country_modifier = meres_end_constructing_boat_lift
				OR = {
					NOT = { owns = 648 }
					has_global_flag = DAL_meres_end_boat_lift_constructed
				}
			}
			remove_country_modifier = meres_end_constructing_boat_lift
		}
		random_owned = { # Finished building, but one of the affected provinces is missing the modifier
			any_neighbor_province = {
				limit = {
					owner = { has_global_flag = DAL_meres_end_boat_lift_constructed }
					OR = {
						province_id = 649
						province_id = 653
						province_id = 654
					}
					NOT = { has_province_modifier = meres_end_increased_trade }
				}
				add_province_modifier = { name = meres_end_increased_trade duration = -1 }
			}
		}
		# }
		
		# Celduin Pirates {
		random_owned = {
			limit = {
				owner = { any_neighbor_country = { has_country_modifier = funding_celduin_pirates } }
			}
			any_neighbor_province = {
				limit = {
					OR = {
						province_id = 140 # Holmgierstadur
						province_id = 524 # Merrborg
						province_id = 526 # Fulginhaim
						province_id = 528 # Baulaborg
						province_id = 530 # Ardruiga Vale
						province_id = 532 # Ilanin
						province_id = 536 # Far Bank
						province_id = 537 # Tretoborg
						province_id = 538 # Halies
						province_id = 540 # Nagy
						province_id = 543 # Padvan
						province_id = 544 # Szrel-Kain
						province_id = 554 # Szrel-Arkasa
						province_id = 622 # Winterion Iaur
						province_id = 625 # Ilpar
						province_id = 626 # Sarad
						province_id = 628 # Kardavan
						province_id = 629 # Lar-Sagra
						province_id = 643 # Naertheiaborg
						province_id = 644 # Myrrborg
						province_id = 645 # Kaupaborg
						province_id = 646 # Iach Celduin
						province_id = 647 # Riverrun
						province_id = 648 # Londaroth
						province_id = 702 # Tauraelin
						province_id = 1404 # Tundera Var
						province_id = 1405 # Burh Salenin
						province_id = 1406 # Durannon
						province_id = 1431 # Esgaldor
					}
					NOT = { has_crime = celduin_pirates }
					NOT = { owner = { primary_culture = rivermen } }
				}
				add_crime = celduin_pirates
			}
		}
		
		random_owned = {
			limit = {
				NOT = { owner = { any_neighbor_country = { has_country_modifier = funding_celduin_pirates } } }
			}
			any_neighbor_province = {
				limit = {
					has_crime = celduin_pirates
				}
				add_crime = no_crime
			}
		}
		
		any_country = {
			limit = {
				any_owned_province = { has_crime = celduin_pirates }
				NOT = { has_country_flag = DAL_alerted_about_pirates }
			}
			country_event = 50915
			set_country_flag = DAL_alerted_about_pirates
		}
		# }
		
		# Marsh Wights
		random_owned = {
			any_neighbor_province = {
				limit = {
					OR = {
						has_crime = marsh_wights
						has_crime = hunting_marsh_wights
					}
					OR = {
						owned_by = LMW
						NOT = { is_core = LMW }
					}
				}
				add_crime = no_crime
			}
		}
		
		# Trading Mechanic Modifier Changes {
		# Remove trading modifiers and flags if DAL doesn't exist or it doesn't own Esgaroth
		random_owned = {
			limit = {
				owner = {
					OR = {
						NOT = { exists = DAL }
						NOT = { DAL = { owns = 654 } }
					}
				}
			}
			owner = {
				any_country = {
					remove_country_modifier = trading_with_DAL
					clr_country_flag = rejected_trade_with_DAL
				}
			}
		}
		
		# Remove trading modifiers and flags from nonexistant countries
		any_country = {
			limit = {
				exists = no
				OR = {
					has_country_modifier = trading_with_DAL
					has_country_flag = rejected_trade_with_DAL
				}
			}
			remove_country_modifier = trading_with_DAL
			clr_country_flag = rejected_trade_with_DAL
		}
		
		# Remove trading modifiers and flags from existing realms that no longer fit the requirements
		any_country = {
			limit = {
				has_country_modifier = trading_with_DAL
				OR = {
					is_vassal = yes
					war_with = DAL
					AND = {
						DAL = { good_evil_alignment = good_alignment }
						good_evil_alignment = evil_alignment
					}
					AND = {
						DAL = { good_evil_alignment = evil_alignment }
						good_evil_alignment = good_alignment
					}
				}
			}
			remove_country_modifier = trading_with_DAL
		}
		
		# Recalculate the number of realms trading
		set_variable = { which = esgaroth_trading value = 0 }
		
		any_country = { # Do not have to worry about erroneous realms having the modifier. The modifier will have already been removed
			limit = {
				has_country_modifier = trading_with_DAL
			}
			FOR = { change_variable = { which = esgaroth_trading value = 1 } }
		}
		
		random_owned = {
			random_neighbor_province = {
				limit = {
					province_id = 654 # Esgaroth
					OR = {
						AND = { # Not trading with anyone
							OR = {
								has_province_modifier = esgaroth_trade_i
								has_province_modifier = esgaroth_trade_ii
								has_province_modifier = esgaroth_trade_iii
								has_province_modifier = esgaroth_trade_iv
								has_province_modifier = esgaroth_trade_v
							}
							NOT = { owner = { FOR = { check_variable = { which = esgaroth_trading value = 0.1 } } } }
						}
						AND = { # Doesn't have the level 1 modifier when trading with only 1 realm
							NOT = { has_province_modifier = esgaroth_trade_i }
							owner = {
								FOR = {
									check_variable = { which = esgaroth_trading value = 0.9 }
									NOT = { check_variable = { which = esgaroth_trading value = 1.1 } }
								}
							}
						}
						AND = { # Doesn't have the level 2 modifier when trading with 2-3 realms
							NOT = { has_province_modifier = esgaroth_trade_ii }
							owner = {
								FOR = {
									check_variable = { which = esgaroth_trading value = 1.9 }
									NOT = { check_variable = { which = esgaroth_trading value = 3.1 } }
								}
							}
						}
						AND = { # Doesn't have the level 3 modifier when trading with 4-5 realms
							NOT = { has_province_modifier = esgaroth_trade_iii }
							owner = {
								FOR = {
									check_variable = { which = esgaroth_trading value = 3.9 }
									NOT = { check_variable = { which = esgaroth_trading value = 5.1 } }
								}
							}
						}
						AND = { # Doesn't have the level 4 modifier when trading with 6-9 realms
							NOT = { has_province_modifier = esgaroth_trade_iv }
							owner = {
								FOR = {
									check_variable = { which = esgaroth_trading value = 5.9 }
									NOT = { check_variable = { which = esgaroth_trading value = 9.1 } }
								}
							}
						}
						AND = { # Doesn't have the level 5 modifier when trading with 10+ realms
							NOT = { has_province_modifier = esgaroth_trade_v }
							owner = {
								FOR = { check_variable = { which = esgaroth_trading value = 9.9 } }
							}
						}
					}
				}
				# Audax Validator "." Ignore_1009
				province_event = {
					# Audax Validator "." Ignore_1006
					id = 50928
				}
			}
		}
		
		# Now that the counting variable is updated, update the dynamic text
		country_event = 200000
		# }
		
		# Refire the cleanup event next month
		country_event = { id = 99001 days = 30 }
	}
}