# Remove this line to have the validator check for strings in localisation
# Audax Validator "!" Ignore_1004

# TODO: Loc some of these events (like the main menus)
# TODO: Setup the post-country selection effects for the core dispute options (voting)
# TODO: Make every menu work accordingly (right now, only menus with the right number of options work)
# TODO: Update invite realm and expand reach to consider if a realm cannot join due to the presence of a country modifier
# TODO: Update ai chances to select various options
# TODO: Putting realms in spheres seems broken
# TODO: Add decision to request to join

# Alliance of Dwarves and Men: {
#	110000 - 110199 }

# Alliance of Dwarves and Men Main Menu - 0 options
country_event = {
	id = 110000
	title = "  Alliance of Dwarves and Men"
	desc = "EVTDESC110000"
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		railroading_tag_specific_description_loc_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_3 = {}
		maroon_color_loc = {}
		dynamic_loc_slot_3 = {}
		dynamic_loc_slot_4 = {}
		dynamic_loc_slot_5 = {}
		dynamic_loc_slot_6 = {}
		dynamic_loc_slot_7 = {}
		dynamic_loc_slot_8 = {}
		end_color_loc = {}
	}
	
	option = {
		name = "§MLeave Alliance§!"
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				is_vassal = no
			}
			casus_belli = {
				target = THIS
				type = humiliate
				months = 60
			}
			casus_belli = {
				target = THIS
				type = cut_down_to_size
				months = 60
			}
		}
		
		remove_country_modifier = alliance_of_dwarves_and_men
		
		any_country = {
			limit = { vassal_of = THIS } # There shouldn't be any. But just in case
			remove_country_modifier = alliance_of_dwarves_and_men
		}
		
		# TODO: Remove all targetting province modifiers and country flags
		# TODO: Add some modifier about not being able to rejoin for 10 years
	}
	
	option = {
		name = "§RExit§!"
	}
}

# Alliance of Dwarves and Men Main Menu - 1 option
country_event = {
	id = 110001
	title = "  Alliance of Dwarves and Men¤"
	desc = ""
	picture = "organizations/alliance_dwarves_men_3"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		railroading_tag_specific_description_loc_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_3 = {}
		maroon_color_loc = {}
		dynamic_loc_slot_3 = {}
		dynamic_loc_slot_4 = {}
		dynamic_loc_slot_5 = {}
		dynamic_loc_slot_6 = {}
		dynamic_loc_slot_7 = {}
		dynamic_loc_slot_8 = {}
		end_color_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms } }
			empty_line_loc = {}
			call_to_arms_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu } }
			empty_line_loc = {}
			core_dispute_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm } }
			empty_line_loc = {}
			invite_realm_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach } }
			empty_line_loc = {}
			expand_culture_reach_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu } }
			empty_line_loc = {}
			specific_flavor_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_economic_union } }
			empty_line_loc = {}
			economic_union_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_political_union } }
			empty_line_loc = {}
			political_union_loc = {}
			empty_line_loc = {}
		}
	}
	
	option = {
		name = ""
		
		set_global_flag = hidden_effects
		
		random_owned = { # Call to Arms will always be first, so if the flag is present, we can assume that it is showing up in the first slot
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms } }
			
			owner = {
				random_owned = {
					limit = { owner = { has_global_flag = hidden_effects } }
					owner = {
						any_country = {
							limit = {
								has_country_modifier = alliance_of_dwarves_and_men
								is_vassal = no # There shouldn't be any. But just in case
								NOT = { tag = THIS }
							}
							create_alliance = THIS
							relation = { who = THIS value = 400 }
						}
						
						FOR = { country_event = 110101 }
					}
				}
			}
			
			call_allies_tooltip_loc = {}
		}
		
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms }
					has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu
				}
			}
			owner = {
				clr_global_flag = alliance_of_dwarves_and_men_conflicting_cores_detected
				
				FOR = {
					# Setup Detecting Conflicting Cores
					any_neighbor_country = {
						limit = {
							NOT = { tag = THIS }
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { is_core = THIS }
						}
						set_global_flag = alliance_of_dwarves_and_men_conflicting_cores_detected
					}
					country_event = 110102
				}
			}
		}
		
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu }
					has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm
				}
			}
			owner = {
				set_country_flag = alliance_dwarves_men_voting_initiator
				set_global_flag = alliances_of_dwarves_and_men_invite_realm
				
				FOR = {
					set_variable = { which = dynamic_loc_country_count value = 0 }
					
					# Resets the naming count
					set_variable = { which = dynamic_loc_names_country value = 0 }
					
					# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
					# Cannot call 400000 as it will not fire in the necessary order
					any_country = {
						clr_country_flag = dynamic_loc_potential_country_target
						clr_country_flag = dynamic_loc_country_target_1
						clr_country_flag = dynamic_loc_country_target_2
						clr_country_flag = dynamic_loc_country_target_3
						clr_country_flag = dynamic_loc_country_target_4
						clr_country_flag = dynamic_loc_country_target_5
						clr_country_flag = dynamic_loc_country_target_6
						clr_country_flag = dynamic_loc_country_target_7
						clr_country_flag = dynamic_loc_country_target_8
					}
					
					any_neighbor_country = {
						limit = {
							capital_scope = { continent = europe } # Rhovanion
							NOT = { has_country_modifier = alliance_of_dwarves_and_men }
							alliance_with = THIS
							war = no
							OR = {
								good_evil_alignment = good_alignment
								good_evil_alignment = neutral_alignment
							}
							is_vassal = no
							OR = {
								is_culture_group = dwarves
								is_culture_group = northmen
								AND = {
									is_culture_group = teleri
									has_global_flag = alliance_of_dwarves_and_men_accept_teleri
								}
								AND = {
									is_culture_group = avari
									has_global_flag = alliance_of_dwarves_and_men_accept_avari
								}
								AND = {
									is_culture_group = anduinrim
									has_global_flag = alliance_of_dwarves_and_men_accept_anduinrim
								}
								AND = {
									is_culture_group = rohirrim
									has_global_flag = alliance_of_dwarves_and_men_accept_rohirrim
								}
							}
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
					
					set_global_flag = alliance_of_dwarves_and_men_voting_on_invite_realm
					
					country_event = 300000 # Country Loc Setting
					
					country_event = 110104 # Getting the callback
				}
			}
		}
		
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm }
					has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach
				}
			}
			owner = {
				set_country_flag = alliance_dwarves_men_voting_initiator
				set_global_flag = alliances_of_dwarves_and_men_expand_cultural_reach
				
				FOR = {
					set_variable = { which = dynamic_loc_country_count value = 0 }
					
					# Resets the naming count
					set_variable = { which = dynamic_loc_names_country value = 0 }
					
					# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
					# Cannot call 400000 as it will not fire in the necessary order
					any_country = {
						clr_country_flag = dynamic_loc_potential_country_target
						clr_country_flag = dynamic_loc_country_target_1
						clr_country_flag = dynamic_loc_country_target_2
						clr_country_flag = dynamic_loc_country_target_3
						clr_country_flag = dynamic_loc_country_target_4
						clr_country_flag = dynamic_loc_country_target_5
						clr_country_flag = dynamic_loc_country_target_6
						clr_country_flag = dynamic_loc_country_target_7
						clr_country_flag = dynamic_loc_country_target_8
					}
					
					any_neighbor_country = {
						limit = {
							rank = 12 # Great or Secondary power
							capital_scope = { continent = europe } # Rhovanion
							NOT = { has_country_modifier = alliance_of_dwarves_and_men }
							alliance_with = THIS
							war = no
							is_vassal = no
							OR = {
								AND = {
									is_culture_group = teleri
									NOT = { has_global_flag = alliance_of_dwarves_and_men_accept_teleri }
								}
								AND = {
									is_culture_group = avari
									NOT = { has_global_flag = alliance_of_dwarves_and_men_accept_avari }
								}
								AND = {
									is_culture_group = anduinrim
									NOT = { has_global_flag = alliance_of_dwarves_and_men_accept_anduinrim }
								}
								AND = {
									is_culture_group = rohirrim
									NOT = { has_global_flag = alliance_of_dwarves_and_men_accept_rohirrim }
								}
							}
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
					
					set_global_flag = alliance_of_dwarves_and_men_voting_on_expand_cultural_reach
					
					country_event = 300000 # Country Loc Setting
					
					country_event = 110104 # Getting the callback
				}
			}
		}
		
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach }
					has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu
				}
			}
			FOR = { country_event = 110105 }
		}
		
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu }
					has_global_flag = alliance_of_dwarves_and_men_can_access_economic_union
				}
			}
			owner = {
				set_country_flag = alliance_dwarves_men_voting_initiator
				set_country_flag = alliance_dwarves_men_selected_country # The initiator is the "defender" in order to get the loc right
				FOR = {
					set_global_flag = alliance_of_dwarves_and_men_voting_on_economic_union
					country_event = 110150 # Voting Handler
				}
			}
		}
		
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_can_access_economic_union }
					has_global_flag = alliance_of_dwarves_and_men_can_access_political_union
				}
			}
			owner = {
				set_country_flag = alliance_dwarves_men_voting_initiator
				set_country_flag = alliance_dwarves_men_selected_country # The initiator is the "defender" in order to get the loc right
				FOR = {
					set_global_flag = alliance_of_dwarves_and_men_voting_on_political_union
					country_event = 110150 # Voting Handler
				}
			}
		}
		
		clr_global_flag = hidden_effects
	}
	
	option = {
		name = "§MLeave Alliance§!"
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				is_vassal = no
			}
			casus_belli = {
				target = THIS
				type = humiliate
				months = 60
			}
			casus_belli = {
				target = THIS
				type = cut_down_to_size
				months = 60
			}
		}
		
		remove_country_modifier = alliance_of_dwarves_and_men
		
		any_country = {
			limit = { vassal_of = THIS } # There shouldn't be any. But just in case
			remove_country_modifier = alliance_of_dwarves_and_men
		}
		
		# TODO: Remove all targetting province modifiers and country flags
		# TODO: Add some modifier about not being able to rejoin for 10 years
	}
	
	option = {
		name = "§RExit§!"
	}
}

# Alliance of Dwarves and Men Main Menu - 2 options
country_event = {
	id = 110002
	title = "  Alliance of Dwarves and Men"
	desc = ""
	picture = "organizations/alliance_dwarves_men_4"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		railroading_tag_specific_description_loc_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_3 = {}
		maroon_color_loc = {}
		dynamic_loc_slot_3 = {}
		dynamic_loc_slot_4 = {}
		dynamic_loc_slot_5 = {}
		dynamic_loc_slot_6 = {}
		dynamic_loc_slot_7 = {}
		dynamic_loc_slot_8 = {}
		end_color_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms } }
			empty_line_loc = {}
			call_to_arms_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu } }
			empty_line_loc = {}
			core_dispute_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm } }
			empty_line_loc = {}
			invite_realm_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach } }
			empty_line_loc = {}
			expand_culture_reach_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu } }
			empty_line_loc = {}
			specific_flavor_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_economic_union } }
			empty_line_loc = {}
			economic_union_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_political_union } }
			empty_line_loc = {}
			political_union_loc = {}
			empty_line_loc = {}
		}
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = "§MLeave Alliance§!"
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				is_vassal = no
			}
			casus_belli = {
				target = THIS
				type = humiliate
				months = 60
			}
			casus_belli = {
				target = THIS
				type = cut_down_to_size
				months = 60
			}
		}
		
		remove_country_modifier = alliance_of_dwarves_and_men
		
		any_country = {
			limit = { vassal_of = THIS } # There shouldn't be any. But just in case
			remove_country_modifier = alliance_of_dwarves_and_men
		}
		
		# TODO: Remove all targetting province modifiers and country flags
		# TODO: Add some modifier about not being able to rejoin for 10 years
	}
	
	option = {
		name = "§RExit§!"
	}
}

# Alliance of Dwarves and Men Main Menu - 3 options
country_event = {
	id = 110003
	title = "  Alliance of Dwarves and Men"
	desc = ""
	picture = "organizations/alliance_dwarves_men_5"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		railroading_tag_specific_description_loc_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_3 = {}
		maroon_color_loc = {}
		dynamic_loc_slot_3 = {}
		dynamic_loc_slot_4 = {}
		dynamic_loc_slot_5 = {}
		dynamic_loc_slot_6 = {}
		dynamic_loc_slot_7 = {}
		dynamic_loc_slot_8 = {}
		end_color_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms } }
			empty_line_loc = {}
			call_to_arms_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu } }
			empty_line_loc = {}
			core_dispute_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm } }
			empty_line_loc = {}
			invite_realm_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach } }
			empty_line_loc = {}
			expand_culture_reach_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu } }
			empty_line_loc = {}
			specific_flavor_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_economic_union } }
			empty_line_loc = {}
			economic_union_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_political_union } }
			empty_line_loc = {}
			political_union_loc = {}
			empty_line_loc = {}
		}
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = "§MLeave Alliance§!"
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				is_vassal = no
			}
			casus_belli = {
				target = THIS
				type = humiliate
				months = 60
			}
			casus_belli = {
				target = THIS
				type = cut_down_to_size
				months = 60
			}
		}
		
		remove_country_modifier = alliance_of_dwarves_and_men
		
		any_country = {
			limit = { vassal_of = THIS } # There shouldn't be any. But just in case
			remove_country_modifier = alliance_of_dwarves_and_men
		}
		
		# TODO: Remove all targetting province modifiers and country flags
		# TODO: Add some modifier about not being able to rejoin for 10 years
	}
	
	option = {
		name = "§RExit§!"
	}
}

# Alliance of Dwarves and Men Main Menu - 4 options
country_event = {
	id = 110004
	title = "  Alliance of Dwarves and Men"
	desc = ""
	picture = "organizations/alliance_dwarves_men_6"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		railroading_tag_specific_description_loc_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_3 = {}
		maroon_color_loc = {}
		dynamic_loc_slot_3 = {}
		dynamic_loc_slot_4 = {}
		dynamic_loc_slot_5 = {}
		dynamic_loc_slot_6 = {}
		dynamic_loc_slot_7 = {}
		dynamic_loc_slot_8 = {}
		end_color_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms } }
			empty_line_loc = {}
			call_to_arms_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu } }
			empty_line_loc = {}
			core_dispute_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm } }
			empty_line_loc = {}
			invite_realm_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach } }
			empty_line_loc = {}
			expand_culture_reach_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu } }
			empty_line_loc = {}
			specific_flavor_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_economic_union } }
			empty_line_loc = {}
			economic_union_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_political_union } }
			empty_line_loc = {}
			political_union_loc = {}
			empty_line_loc = {}
		}
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = "§MLeave Alliance§!"
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				is_vassal = no
			}
			casus_belli = {
				target = THIS
				type = humiliate
				months = 60
			}
			casus_belli = {
				target = THIS
				type = cut_down_to_size
				months = 60
			}
		}
		
		remove_country_modifier = alliance_of_dwarves_and_men
		
		any_country = {
			limit = { vassal_of = THIS } # There shouldn't be any. But just in case
			remove_country_modifier = alliance_of_dwarves_and_men
		}
		
		# TODO: Remove all targetting province modifiers and country flags
		# TODO: Add some modifier about not being able to rejoin for 10 years
	}
	
	option = {
		name = "§RExit§!"
	}
}

# Alliance of Dwarves and Men Main Menu - 5 options
country_event = {
	id = 110005
	title = "  Alliance of Dwarves and Men"
	desc = ""
	picture = "organizations/alliance_dwarves_men_7"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		railroading_tag_specific_description_loc_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_3 = {}
		maroon_color_loc = {}
		dynamic_loc_slot_3 = {}
		dynamic_loc_slot_4 = {}
		dynamic_loc_slot_5 = {}
		dynamic_loc_slot_6 = {}
		dynamic_loc_slot_7 = {}
		dynamic_loc_slot_8 = {}
		end_color_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms } }
			empty_line_loc = {}
			call_to_arms_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu } }
			empty_line_loc = {}
			core_dispute_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm } }
			empty_line_loc = {}
			invite_realm_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach } }
			empty_line_loc = {}
			expand_culture_reach_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu } }
			empty_line_loc = {}
			specific_flavor_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_economic_union } }
			empty_line_loc = {}
			economic_union_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_political_union } }
			empty_line_loc = {}
			political_union_loc = {}
			empty_line_loc = {}
		}
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = "§MLeave Alliance§!"
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				is_vassal = no
			}
			casus_belli = {
				target = THIS
				type = humiliate
				months = 60
			}
			casus_belli = {
				target = THIS
				type = cut_down_to_size
				months = 60
			}
		}
		
		remove_country_modifier = alliance_of_dwarves_and_men
		
		any_country = {
			limit = { vassal_of = THIS } # There shouldn't be any. But just in case
			remove_country_modifier = alliance_of_dwarves_and_men
		}
		
		# TODO: Remove all targetting province modifiers and country flags
		# TODO: Add some modifier about not being able to rejoin for 10 years
	}
	
	option = {
		name = "§RExit§!"
	}
}

# Alliance of Dwarves and Men Main Menu - 6 options
country_event = {
	id = 110006
	title = "  Alliance of Dwarves and Men"
	desc = ""
	picture = "organizations/alliance_dwarves_men_8"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		railroading_tag_specific_description_loc_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_3 = {}
		maroon_color_loc = {}
		dynamic_loc_slot_3 = {}
		dynamic_loc_slot_4 = {}
		dynamic_loc_slot_5 = {}
		dynamic_loc_slot_6 = {}
		dynamic_loc_slot_7 = {}
		dynamic_loc_slot_8 = {}
		end_color_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms } }
			empty_line_loc = {}
			call_to_arms_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu } }
			empty_line_loc = {}
			core_dispute_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm } }
			empty_line_loc = {}
			invite_realm_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach } }
			empty_line_loc = {}
			expand_culture_reach_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu } }
			empty_line_loc = {}
			specific_flavor_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_economic_union } }
			empty_line_loc = {}
			economic_union_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_political_union } }
			empty_line_loc = {}
			political_union_loc = {}
			empty_line_loc = {}
		}
	}
	
	option = {
		name = "" # Call to Arms
	}
	
	option = {
		name = "" # Core Dispute
	}
	
	option = {
		name = "" # Invite Realm
	}
	
	option = {
		name = "" # Expand Culture Reach
	}
	
	option = {
		name = "" # Specific Flavor
	}
	
	option = {
		name = "" # Propose an Economic/Political Union
	}
	
	option = {
		name = "§MLeave Alliance§!"
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				is_vassal = no
			}
			casus_belli = {
				target = THIS
				type = humiliate
				months = 60
			}
			casus_belli = {
				target = THIS
				type = cut_down_to_size
				months = 60
			}
		}
		
		remove_country_modifier = alliance_of_dwarves_and_men
		
		any_country = {
			limit = { vassal_of = THIS } # There shouldn't be any. But just in case
			remove_country_modifier = alliance_of_dwarves_and_men
		}
		
		# TODO: Remove all targetting province modifiers and country flags
		# TODO: Add some modifier about not being able to rejoin for 10 years
	}
	
	option = {
		name = "§RExit§!"
	}
}

# Core Dispute Menu - 1 option
country_event = {
	id = 110010
	title = "  Alliance of Dwarves and Men - Core Disputes"
	desc = ""
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_resolve_conflicting_cores } }
			empty_line_loc = {}
			resolve_conflicting_cores_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
			empty_line_loc = {}
			request_return_of_cores_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
			empty_line_loc = {}
			return_cores_loc = {}
			empty_line_loc = {}
		}
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			
			# There shouldn't be anything with the modifier. But just in case
			FOR = { random_owned = { any_neighbor_province = { remove_province_modifier = dynamic_loc_potential_region_target } } }
			
			# Shouldn' be any global flags around. But just in case
			clr_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores
			clr_global_flag = alliances_of_dwarves_and_men_requesting_return_of_cores
			clr_global_flag = alliances_of_dwarves_and_men_returning_cores
		}
		
		clr_global_flag = hidden_effects
		
		
	}
	
	option = {
		name = ""
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_resolve_conflicting_cores } }
			
			owner = {
				set_country_flag = alliance_dwarves_men_voting_initiator
				set_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores
				
				FOR = {
					set_variable = { which = dynamic_loc_region_count value = 0 }
					
					# Resets the naming count
					set_variable = { which = dynamic_loc_names_region value = 0 }
					
					# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
					
					random_owned = {
						any_neighbor_province = {
							limit = {
								is_core = THIS
								any_core = {
									NOT = { tag = THIS }
									has_country_modifier = alliance_of_dwarves_and_men
								}
							}
							add_province_modifier = { name = dynamic_loc_potential_region_target duration = 1 }
						}
						any_neighbor_province = {
							limit = {
								is_state_capital = yes
								state_scope = { any_owned_province = { has_province_modifier = dynamic_loc_potential_region_target } }
							}
							owner = { FOR = { change_variable = { which = dynamic_loc_region_count value = 1 } } }
						}
					}
					
					country_event = 300008 # Region Loc Setting
					
					country_event = 110103 # Getting the callback
				}
			}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
			
			owner = {
				set_country_flag = alliance_dwarves_men_voting_initiator
				set_global_flag = alliances_of_dwarves_and_men_requesting_return_of_cores
					
				# Sets the targeting modifier on every core of THIS where the owner is not us and is part of the organization
				all_core = {
					limit = {
						NOT = { owned_by = THIS }
						owner = { has_country_modifier = alliance_of_dwarves_and_men }
					}
					add_province_modifier = { name = dynamic_loc_potential_region_target duration = 1 }
				}
				
				# Removes the modifier if the province is a core of the owner
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						NOT = { tag = THIS }
					}
					all_core = { remove_province_modifier = dynamic_loc_potential_region_target } # The only provinces retaining the modifier are those that are cores of the decision taker, but not of the owner
				}
				
				FOR = {
					set_variable = { which = dynamic_loc_region_count value = 0 }
					
					# Resets the naming count
					set_variable = { which = dynamic_loc_names_region value = 0 }
					
					# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
					
					random_owned = {
						any_neighbor_province = {
							limit = {
								is_state_capital = yes
								state_scope = { any_owned_province = { has_province_modifier = dynamic_loc_potential_region_target } }
							}
							owner = { FOR = { change_variable = { which = dynamic_loc_region_count value = 1 } } }
						}
					}
					
					country_event = 300008 # Region Loc Setting
					
					country_event = 110103 # Getting the callback
				}
			}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
			
			owner = {
				set_country_flag = alliance_dwarves_men_voting_initiator
				set_global_flag = alliances_of_dwarves_and_men_returning_cores
				
				any_owned = {
					limit = {
						NOT = { is_core = THIS }
						any_core = {
							exists = yes
							has_country_modifier = alliance_of_dwarves_and_men
						}
					}
					add_province_modifier = { name = dynamic_loc_potential_region_target duration = 1 }
				}
				
				FOR = {
					set_variable = { which = dynamic_loc_region_count value = 0 }
					
					# Resets the naming count
					set_variable = { which = dynamic_loc_names_region value = 0 }
					
					# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
					
					random_owned = {
						any_neighbor_province = {
							limit = {
								is_state_capital = yes
								state_scope = { any_owned_province = { has_province_modifier = dynamic_loc_potential_region_target } }
							}
							owner = { FOR = { change_variable = { which = dynamic_loc_region_count value = 1 } } }
						}
					}
					
					country_event = 300008 # Region Loc Setting
					
					country_event = 110103 # Getting the callback
				}
			}
		}
	}
	
	option = {
		name = "§RBack to main Alliance of Dwarves and Men menu§!"
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			owner = { FOR = { country_event = 110100 } }
		}
		
		clr_global_flag = hidden_effects
		
		triggered_event_alliance_of_dwarves_and_men_loc = {}
	}
}

# Core Dispute Menu - 2 option
country_event = {
	id = 110011
	title = "  Alliance of Dwarves and Men - Core Disputes"
	desc = ""
	picture = "organizations/alliance_dwarves_men_3"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_resolve_conflicting_cores } }
			empty_line_loc = {}
			resolve_conflicting_cores_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
			empty_line_loc = {}
			request_return_of_cores_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
			empty_line_loc = {}
			return_cores_loc = {}
			empty_line_loc = {}
		}
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			
			# There shouldn't be anything with the modifier. But just in case
			FOR = { random_owned = { any_neighbor_province = { remove_province_modifier = dynamic_loc_potential_region_target } } }
			
			# Shouldn' be any global flags around. But just in case
			clr_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores
			clr_global_flag = alliances_of_dwarves_and_men_requesting_return_of_cores
			clr_global_flag = alliances_of_dwarves_and_men_returning_cores
		}
		
		clr_global_flag = hidden_effects
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = "§RBack to main Alliance of Dwarves and Men menu§!"
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			owner = { FOR = { country_event = 110100 } }
		}
		
		clr_global_flag = hidden_effects
		
		triggered_event_alliance_of_dwarves_and_men_loc = {}
	}
}

# Core Dispute Menu - 3 option
country_event = {
	id = 110012
	title = "  Alliance of Dwarves and Men - Core Disputes"
	desc = ""
	picture = "organizations/alliance_dwarves_men_4"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_resolve_conflicting_cores } }
			empty_line_loc = {}
			resolve_conflicting_cores_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
			empty_line_loc = {}
			request_return_of_cores_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
			empty_line_loc = {}
			return_cores_loc = {}
			empty_line_loc = {}
		}
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			
			# There shouldn't be anything with the modifier. But just in case
			FOR = { random_owned = { any_neighbor_province = { remove_province_modifier = dynamic_loc_potential_region_target } } }
			
			# Shouldn' be any global flags around. But just in case
			clr_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores
			clr_global_flag = alliances_of_dwarves_and_men_requesting_return_of_cores
			clr_global_flag = alliances_of_dwarves_and_men_returning_cores
		}
		
		clr_global_flag = hidden_effects
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = "§RBack to main Alliance of Dwarves and Men menu§!"
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			owner = { FOR = { country_event = 110100 } }
		}
		
		clr_global_flag = hidden_effects
		
		triggered_event_alliance_of_dwarves_and_men_loc = {}
	}
}

# Alliance of Men and Dwarves Region Selection 1
country_event = {
	id = 110020
	title = "  Alliance of Dwarves and Men - Region Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_1 }
					remove_province_modifier = dynamic_loc_region_target_1
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Region Selection 2
country_event = {
	id = 110021
	title = "  Alliance of Dwarves and Men - Region Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_3"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_1 }
					remove_province_modifier = dynamic_loc_region_target_1
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Second
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_2 }
					remove_province_modifier = dynamic_loc_region_target_2
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Region Selection 3
country_event = {
	id = 110022
	title = "  Alliance of Dwarves and Men - Region Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_4"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_1 }
					remove_province_modifier = dynamic_loc_region_target_1
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Second
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_2 }
					remove_province_modifier = dynamic_loc_region_target_2
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Third
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_3 }
					remove_province_modifier = dynamic_loc_region_target_3
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Region Selection 4
country_event = {
	id = 110023
	title = "  Alliance of Dwarves and Men - Region Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_5"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_1 }
					remove_province_modifier = dynamic_loc_region_target_1
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Second
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_2 }
					remove_province_modifier = dynamic_loc_region_target_2
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Third
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_3 }
					remove_province_modifier = dynamic_loc_region_target_3
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fourth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_4 }
					remove_province_modifier = dynamic_loc_region_target_4
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Region Selection 5
country_event = {
	id = 110024
	title = "  Alliance of Dwarves and Men - Region Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_6"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_5 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_1 }
					remove_province_modifier = dynamic_loc_region_target_1
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Second
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_2 }
					remove_province_modifier = dynamic_loc_region_target_2
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Third
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_3 }
					remove_province_modifier = dynamic_loc_region_target_3
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fourth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_4 }
					remove_province_modifier = dynamic_loc_region_target_4
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fifth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_5 }
					remove_province_modifier = dynamic_loc_region_target_5
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Region Selection 6
country_event = {
	id = 110025
	title = "  Alliance of Dwarves and Men - Region Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_7"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_5 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_6 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_1 }
					remove_province_modifier = dynamic_loc_region_target_1
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Second
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_2 }
					remove_province_modifier = dynamic_loc_region_target_2
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Third
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_3 }
					remove_province_modifier = dynamic_loc_region_target_3
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fourth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_4 }
					remove_province_modifier = dynamic_loc_region_target_4
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fifth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_5 }
					remove_province_modifier = dynamic_loc_region_target_5
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Sixth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_6 }
					remove_province_modifier = dynamic_loc_region_target_6
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Region Selection 7
country_event = {
	id = 110026
	title = "  Alliance of Dwarves and Men - Region Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_8"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_5 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_6 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_7 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_1 }
					remove_province_modifier = dynamic_loc_region_target_1
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Second
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_2 }
					remove_province_modifier = dynamic_loc_region_target_2
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Third
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_3 }
					remove_province_modifier = dynamic_loc_region_target_3
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fourth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_4 }
					remove_province_modifier = dynamic_loc_region_target_4
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fifth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_5 }
					remove_province_modifier = dynamic_loc_region_target_5
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Sixth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_6 }
					remove_province_modifier = dynamic_loc_region_target_6
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Seventh
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_7 }
					remove_province_modifier = dynamic_loc_region_target_7
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Region Selection 8
country_event = {
	id = 110027
	title = "  Alliance of Dwarves and Men - Region Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_9"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_5 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_6 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_7 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_8 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_1 }
					remove_province_modifier = dynamic_loc_region_target_1
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Second
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_2 }
					remove_province_modifier = dynamic_loc_region_target_2
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Third
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_3 }
					remove_province_modifier = dynamic_loc_region_target_3
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fourth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_4 }
					remove_province_modifier = dynamic_loc_region_target_4
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Fifth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_5 }
					remove_province_modifier = dynamic_loc_region_target_5
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Sixth
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_6 }
					remove_province_modifier = dynamic_loc_region_target_6
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Seventh
	option = {
		name = ""
		
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = dynamic_loc_region_target_7 }
					remove_province_modifier = dynamic_loc_region_target_7
					add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
				}
			}
			
			set_variable = { which = dynamic_loc_country_count value = 0 }
			
			# Resets the naming count
			set_variable = { which = dynamic_loc_names_country value = 0 }
			
			# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
			# Cannot call 400000 as it will not fire in the necessary order
			any_country = {
				clr_country_flag = dynamic_loc_potential_country_target
				clr_country_flag = dynamic_loc_country_target_1
				clr_country_flag = dynamic_loc_country_target_2
				clr_country_flag = dynamic_loc_country_target_3
				clr_country_flag = dynamic_loc_country_target_4
				clr_country_flag = dynamic_loc_country_target_5
				clr_country_flag = dynamic_loc_country_target_6
				clr_country_flag = dynamic_loc_country_target_7
				clr_country_flag = dynamic_loc_country_target_8
			}
			
			# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
			
			random_owned = {
				limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
				owner = {
					any_neighbor_country = {
						limit = {
							has_country_modifier = alliance_of_dwarves_and_men
							any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
							NOT = { tag = THIS }
						}
						set_country_flag = dynamic_loc_potential_country_target
						FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
					}
				}
			}
			
			random_owned = {
				limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
					}
					set_country_flag = dynamic_loc_potential_country_target
					FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
				}
			}
			
			country_event = 300000 # Country Loc Setting
			
			country_event = 110104 # Getting the callback
			country_event = 400001 # Region cleanup
		}
	}
	
	# Eighth
	option = {
		name = ""
		
		# Exactly 8 options
		random_owned = {
			limit = { owner = { NOT = { FOR = { check_variable = { which = dynamic_loc_region_count value = 8.1 } } } } }
			owner = {
				FOR = {
					random_owned = {
						any_neighbor_province = {
							limit = { has_province_modifier = dynamic_loc_region_target_8 }
							remove_province_modifier = dynamic_loc_region_target_8
							add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 }
						}
					}
					
					set_variable = { which = dynamic_loc_country_count value = 0 }
					
					# Resets the naming count
					set_variable = { which = dynamic_loc_names_country value = 0 }
					
					# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
					# Cannot call 400000 as it will not fire in the necessary order
					any_country = {
						clr_country_flag = dynamic_loc_potential_country_target
						clr_country_flag = dynamic_loc_country_target_1
						clr_country_flag = dynamic_loc_country_target_2
						clr_country_flag = dynamic_loc_country_target_3
						clr_country_flag = dynamic_loc_country_target_4
						clr_country_flag = dynamic_loc_country_target_5
						clr_country_flag = dynamic_loc_country_target_6
						clr_country_flag = dynamic_loc_country_target_7
						clr_country_flag = dynamic_loc_country_target_8
					}
					
					# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
					
					random_owned = {
						limit = { owner = { has_global_flag = alliances_of_dwarves_and_men_resolving_conflicting_cores } }
						owner = {
							any_neighbor_country = {
								limit = {
									has_country_modifier = alliance_of_dwarves_and_men
									any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
									NOT = { tag = THIS }
								}
								set_country_flag = dynamic_loc_potential_country_target
								FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
							}
						}
					}
					
					random_owned = {
						limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores } }
						owner = {
							any_neighbor_country = {
								limit = {
									has_country_modifier = alliance_of_dwarves_and_men
									any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
									NOT = { tag = THIS }
								}
								set_country_flag = dynamic_loc_potential_country_target
								FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
							}
						}
					}
					
					random_owned = {
						limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_return_cores } }
						any_country = {
							limit = {
								has_country_modifier = alliance_of_dwarves_and_men
								any_core = { has_province_modifier = alliance_dwarves_men_selected_region }
							}
							set_country_flag = dynamic_loc_potential_country_target
							FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
						}
					}
					
					country_event = 300000 # Country Loc Setting
					
					country_event = 110104 # Getting the callback
					country_event = 400001 # Region cleanup
				}
			}
		}
		
		# More than 8 options
		random_owned = {
			limit = { FOR = { check_variable = { which = dynamic_loc_region_count value = 8.1 } } }
			owner = {
				FOR = {
					# Account for the 7 that just got handled -- slot 8 is "next" (that just got selected)
					change_variable = { which = dynamic_loc_region_count value = -7 }
					
					# Resets the naming count
					set_variable = { which = dynamic_loc_names_region value = 0 }
					
					# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
					# Cannot call 401001 as it will not fire in the necessary order
					random_owned = {
						any_neighbor_province = {
							remove_province_modifier = dynamic_loc_region_target_1
							remove_province_modifier = dynamic_loc_region_target_2
							remove_province_modifier = dynamic_loc_region_target_3
							remove_province_modifier = dynamic_loc_region_target_4
							remove_province_modifier = dynamic_loc_region_target_5
							remove_province_modifier = dynamic_loc_region_target_6
							remove_province_modifier = dynamic_loc_region_target_7
							remove_province_modifier = dynamic_loc_region_target_8
						}
					}
					
					# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
					
					# Reset the region selection names
					country_event = { id = 300008 days = 0 } # Region Loc Setting
				}
				
				country_event = 110103 # Getting the callback
			}
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Country Selection 1
country_event = {
	id = 110030
	title = "  Alliance of Dwarves and Men - Country Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_1 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Country Selection 2
country_event = {
	id = 110031
	title = "  Alliance of Dwarves and Men - Country Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_3"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_1 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Second
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_2 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Country Selection 3
country_event = {
	id = 110032
	title = "  Alliance of Dwarves and Men - Country Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_4"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_1 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Second
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_2 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Third
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_3 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Country Selection 4
country_event = {
	id = 110033
	title = "  Alliance of Dwarves and Men - Country Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_5"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_1 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Second
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_2 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Third
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_3 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fourth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_4 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Country Selection 5
country_event = {
	id = 110034
	title = "  Alliance of Dwarves and Men - Country Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_6"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_5 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_1 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Second
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_2 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Third
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_3 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fourth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_4 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fifth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_5 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Country Selection 6
country_event = {
	id = 110035
	title = "  Alliance of Dwarves and Men - Country Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_7"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_5 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_6 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_1 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Second
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_2 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Third
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_3 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fourth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_4 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fifth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_5 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Sixth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_6 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Country Selection 7
country_event = {
	id = 110036
	title = "  Alliance of Dwarves and Men - Country Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_8"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_5 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_6 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_7 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_1 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Second
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_2 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Third
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_3 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fourth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_4 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fifth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_5 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Sixth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_6 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Seventh
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_7 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Men and Dwarves Country Selection 8
country_event = {
	id = 110037
	title = "  Alliance of Dwarves and Men - Country Selection"
	desc = ""
	picture = "organizations/alliance_dwarves_men_9"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_1 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_2 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_3 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_5 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_6 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_7 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		dynamic_loc_slot_8 = {}
		empty_line_loc = {}
	}
	
	# First
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_1 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Second
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_2 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Third
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_3 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fourth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_4 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Fifth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_5 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Sixth
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_6 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Seventh
	option = {
		name = ""
		
		random_country = {
			limit = { has_country_flag = dynamic_loc_country_target_7 }
			set_country_flag = alliance_dwarves_men_selected_country
		}
		
		set_country_flag = alliance_dwarves_men_voting_initiator
		FOR = { country_event = 110150 } # Voting Handler
		
		FOR = { country_event = 402001 } # Everything cleanup
	}
	
	# Eighth
	option = {
		name = ""
		
		# Exactly 8 options
		random_owned = {
			limit = { NOT = { FOR = { check_variable = { which = dynamic_loc_country_count value = 8.1 } } } }
			owner = {
				random_country = {
					limit = { has_country_flag = dynamic_loc_country_target_8 }
					set_country_flag = alliance_dwarves_men_selected_country
				}
				
				owner = { set_country_flag = alliance_dwarves_men_voting_initiator }
				FOR = { country_event = 110150 } # Voting Handler
				
				FOR = { country_event = 402001 } # Everything cleanup
			}
		}
		
		# More than 8 options
		random_owned = {
			limit = { FOR = { check_variable = { which = dynamic_loc_country_count value = 8.1 } } }
			owner = {
				FOR = {
					# Account for the 7 that just got handled -- slot 8 is "next" (that just got selected)
					change_variable = { which = dynamic_loc_country_count value = -7 }
					
					# Resets the naming count
					set_variable = { which = dynamic_loc_names_country value = 0 }
					
					# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
					# Cannot call 400000 as it will not fire in the necessary order
					any_country = {
						clr_country_flag = dynamic_loc_country_target_1
						clr_country_flag = dynamic_loc_country_target_2
						clr_country_flag = dynamic_loc_country_target_3
						clr_country_flag = dynamic_loc_country_target_4
						clr_country_flag = dynamic_loc_country_target_5
						clr_country_flag = dynamic_loc_country_target_6
						clr_country_flag = dynamic_loc_country_target_7
						clr_country_flag = dynamic_loc_country_target_8
					}
					
					# Cannot call 402000 as it will not fire in the necessary order. Cannot put the standard effects in as this will mess up the renaming
					
					country_event = 300000 # Country Loc Setting
				}
				
				country_event = 110104 # Getting the callback
			}
		}
	}
	
	option = {
		name = "§RExit§!"
		
		FOR = {
			country_event = 402001 # Clears dynamic loc modifiers and flags
			country_event = 110110 # Clears Alliance of Dwarves and Men modifiers and flags
		}
	}
}

# Alliance of Dwarves and Men Specific Flavor - 1 option
country_event = {
	id = 110040
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_dahdriks_gap } }
			empty_line_loc = {}
			settle_cores_of_dahdriks_gap_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands } }
			empty_line_loc = {}
			settle_cores_of_mountainlands_loc = {}
			empty_line_loc = {}
		}
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			
			# There shouldn't be anything with the modifier. But just in case
			FOR = { random_owned = { any_neighbor_province = { remove_province_modifier = dynamic_loc_potential_region_target } } }
		}
		
		clr_global_flag = hidden_effects
	}
	
	option = {
		name = ""
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_dahdriks_gap } }
			owner = {
				ERE_657 = { add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 } } # Dádhrik's Gap
				country_event = 110042
			}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands } }
			owner = {
				ERE_660 = { add_province_modifier = { name = alliance_dwarves_men_selected_region duration = -1 } } # Mountainlands
				country_event = 110042
			}
		}
	}
	
	option = {
		name = "§RBack to main Alliance of Dwarves and Men menu§!"
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			owner = { FOR = { country_event = 110100 } }
		}
		
		clr_global_flag = hidden_effects
		
		triggered_event_alliance_of_dwarves_and_men_loc = {}
	}
}

# Alliance of Dwarves and Men Specific Flavor - 2 option
country_event = {
	id = 110041
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_3"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		empty_line_loc = {}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_dahdriks_gap } }
			empty_line_loc = {}
			settle_cores_of_dahdriks_gap_loc = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands } }
			empty_line_loc = {}
			settle_cores_of_mountainlands_loc = {}
			empty_line_loc = {}
		}
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			
			# There shouldn't be anything with the modifier. But just in case
			FOR = { random_owned = { any_neighbor_province = { remove_province_modifier = dynamic_loc_potential_region_target } } }
		}
		
		clr_global_flag = hidden_effects
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = ""
	}
	
	option = {
		name = "§RBack to main Alliance of Dwarves and Men menu§!"
		
		set_global_flag = hidden_effects
		
		random_owned = {
			limit = { owner = { has_global_flag = hidden_effects } }
			owner = { FOR = { country_event = 110100 } }
		}
		
		clr_global_flag = hidden_effects
		
		triggered_event_alliance_of_dwarves_and_men_loc = {}
	}
}

# Alliance of Dwarves and Men Specific Flavor - Northman realm deciding how to handle claims to land
country_event = {
	id = 110042
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_4"
	
	is_triggered_only = yes
	
	option = {
		name = "Drop the claim completely (§BHistorical§!)"
		
		badboy = -5
		plurality = 3
		
		random_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
			}
			relation = { who = THIS value = 50 }
			# TODO: Fire country event letting the owner of the provinces know about the dropped claim
		}
		
		random_country = {
			limit = {
				THIS = { is_greater_power = yes }
				has_country_modifier = alliance_of_dwarves_and_men
				any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
			}
			diplomatic_influence = { who = THIS value = 50 }
		}
		
		# Doing this outside the random_country in case somehow one of the provinces in the region is not owned by the same owner
		FOR = {
			random_owned = {
				random_neighbor_province = {
					limit = {
						has_province_modifier = alliance_dwarves_men_selected_region
						region = ERE_657 # Dádhrik's Gap
					}
					owner = { set_global_flag = alliance_of_dwarves_and_men_settled_dadhriks_gap }
				}
				random_neighbor_province = {
					limit = {
						has_province_modifier = alliance_dwarves_men_selected_region
						region = ERE_660 # Mountainlands
					}
					owner = { set_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands }
				}
				any_neighbor_province = {
					limit = { has_province_modifier = alliance_dwarves_men_selected_region }
					remove_core = DAL
					remove_core = RHO
					remove_core = GRA
					remove_core = ADH
				}
			}
			
			country_event = 110110 # Alliance of Dwarves and Men cleanup
		}
	}
	
	option = {
		name = "Drop the claim, but only for resettlement of our people"
		
		badboy = 2
		plurality = 2
		
		random_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
			}
			country_event = 110043
		}
	}
	
	option = {
		name = "Press the claim"
		
		badboy = 7
		plurality = 1
		
		random_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				any_owned_province = { has_province_modifier = alliance_dwarves_men_selected_region }
			}
			country_event = 110047
		}
	}
	
	option = {
		name = "We will revisit this claim"
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
}

# Alliance of Dwarves and Men - Specific Flavor -- Dwarves asked to send Northmen back to Northmen realms
country_event = {
	id = 110043
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	option = {
		name = "This is acceptable"
		
		badboy = -2
		plurality = -1
		
		# Mimicking the results of following the historical option with a little bit of forced migration
		relation = { who = FROM value = 50 }
		
		random_owned = {
			limit = {
				has_province_modifier = alliance_dwarves_men_selected_region
				region = ERE_657 # Dádhrik's Gap
			}
			owner = {
				FROM = { country_event = 110044 }
				set_global_flag = alliance_of_dwarves_and_men_settled_dadhriks_gap
			}
		}
		
		random_owned = {
			limit = {
				has_province_modifier = alliance_dwarves_men_selected_region
				region = ERE_660 # Mountainlands
			}
			owner = {
				FROM = { country_event = 110045 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands
			}
		}
		
		# Doing this outside the random_country in case somehow one of the provinces in the region is not owned by the same owner
		FOR = {
			random_owned = {
				any_neighbor_province = {
					limit = { has_province_modifier = alliance_dwarves_men_selected_region }
					remove_core = DAL
					remove_core = RHO
					remove_core = GRA
					remove_core = ADH
				}
			}
		}
	}
	
	option = {
		name = "Unacceptable"
		
		plurality = 1
		FROM = { country_event = 110046 }
	}
}

# Alliance of Dwarves and Men - Specific Flavor --Dwarves transfer Dádhrik's Gap Northmen to Dalelands
country_event = {
	id = 110044
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_5"
	
	is_triggered_only = yes
	
	option = {
		name = "Kotstó"
		
		plurality = -0.5
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { region = ERE_657 } # Dádhrik's Gap
				}
				move_pop = 141 # Kotstó
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "Dale"
		
		plurality = -0.5
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { region = ERE_657 } # Dádhrik's Gap
				}
				move_pop = 652 # Dale
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "Felagsgard"
		
		plurality = -0.5
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { region = ERE_657 } # Dádhrik's Gap
				}
				move_pop = 655 # Felagsgard
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "Alduringard"
		
		plurality = -0.5
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { region = ERE_657 } # Dádhrik's Gap
				}
				move_pop = 141 # Alduringard
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "Let the people decide"
		
		plurality = -1
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = {
						OR = {
							province_id = 658 # Setborg
							province_id = 689 # Enrungagard
							province_id = 1170 # Mordolt
						}
					}
				}
				move_pop = 655 # Felagsgard
			}
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = {
						OR = {
							province_id = 657 # Thurasigborg
							province_id = 1169 # Shieldwall
						}
					}
				}
				move_pop = 656 # Alduringard
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
}

# # Alliance of Dwarves and Men - Specific Flavor --Dwarves transfer Mountainlands Northmen to Dalelands
country_event = {
	id = 110045
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_5"
	
	is_triggered_only = yes
	
	option = {
		name = "Flyiarstadur"
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { region = ERE_660 } # Mountainlands
				}
				move_pop = 355 # Flyiarstadur
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "Withibord"
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { region = ERE_660 } # Mountainlands
				}
				move_pop = 651 # Withibord
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "Pennstó"
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { region = ERE_660 } # Mountainlands
				}
				move_pop = 661 # Pennstó
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "Thliuhanastath"
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { region = ERE_660 } # Mountainlands
				}
				move_pop = 1377 # Thliuhanastath
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "Let the people decide"
		
		FROM = {
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = {
						OR = {
							province_id = 396 # Steinholl
							province_id = 660 # Erebor
						}
					}
				}
				move_pop = 355 # Flyiarstadur
			}
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { province_id = 664 } # Weniaborg
				}
				move_pop = 651 # Withibord
			}
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { province_id = 659 } # Vargurat
				}
				move_pop = 661 # Pennstó
			}
			any_pop = {
				limit = {
					is_culture_group = northmen
					location = { province_id = 1168 } # Barad Draug
				}
				move_pop = 1377 # Thliuhanastath
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
}

# # Alliance of Dwarves and Men - Specific Flavor --Dwarves refused Northman offer
country_event = {
	id = 110046
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	option = {
		name = "We will back down"
		
		plurality = 0.5
		
		FROM = {
			any_owned = {
				limit = {
					has_province_modifier = alliance_dwarves_men_selected_region
				}
				add_province_modifier = { name = alliance_dwarves_men_diplomacy_stalled duration = 3650 }
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
	
	option = {
		name = "We will ask the alliance for a vote"
		
		# TODO: Setup and call voting
		# TODO: Set the right global flag to mark the region as having it's cored settled (alliance_of_dwarves_and_men_settled_dadhriks_gap or alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands) in the event
		# TODO: Make sure to clear flags
	}
}

# Alliance of Dwarves and Men - Specific Flavor -- Dwarves asked to send Northmen back to Northmen realms
country_event = {
	id = 110047
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	option = {
		name = "This is acceptable"
		
		badboy = -5
		plurality = 3
		
		relation = { who = FROM value = 50 }
		
		any_owned = {
			limit = { has_province_modifier = alliance_dwarves_men_selected_region }
			remove_core = THIS
		}
		
		# Doing this outside the random_country in case somehow one of the provinces in the region is not owned by the same owner
		FOR = {
			random_owned = {
				random_neighbor_province = {
					limit = {
						has_province_modifier = alliance_dwarves_men_selected_region
						region = ERE_657 # Dádhrik's Gap
					}
					owner = { set_global_flag = alliance_of_dwarves_and_men_settled_dadhriks_gap }
				}
				random_neighbor_province = {
					limit = {
						has_province_modifier = alliance_dwarves_men_selected_region
						region = ERE_660 # Mountainlands
					}
					owner = { set_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands }
				}
			}
		}
		
		FROM = { country_event = 110048 }
	}
	
	option = {
		name = "Unacceptable"
		
		plurality = 1
		FROM = { country_event = 110046 }
	}
}

# Alliance of Dwarves and Men - Specific Flavor -- Northman realm gains control of region
country_event = {
	id = 110048
	title = "  Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men_1"
	
	is_triggered_only = yes
	
	option = {
		name = "They accept!"
		
		plurality = -0.5
		
		FROM = {
			any_owned = {
				limit = { has_province_modifier = alliance_dwarves_men_selected_region }
				add_core = THIS
				secede_province = THIS
			}
		}
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men cleanup
	}
}

# Alliance of Dwarves and Men Main Menu Setup/Option Calculator
country_event = {
	id = 110100
	title = "Alliance of Dwarves and Men Setup"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Continue"
		
		railroading_tag_specific_description_loc_1 = { state_scope = { change_region_name = "Depending on the state of Middle Earth and the alliance, you may be able to call allies to war, dispute cores, invite realms and culture groups to the alliance, access flavor specific to your realm and alliance, or propose economic and political unions." } }
		railroading_tag_specific_description_loc_2 = { state_scope = { change_region_name = "In order to invite realms, you need to have an alliance, and the realm in question must be one of the accepted cultures groups of the alliance." } }
		railroading_tag_specific_description_loc_3 = { state_scope = { change_region_name = "The accepted culture groups are|" } }
		# Using the higher numbers to make sure there's no overlap
		dynamic_loc_slot_3 = { state_scope = { change_region_name = "Dwarven" } }
		dynamic_loc_slot_4 = { state_scope = { change_region_name = "Northmen" } }
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_accept_teleri } }
			dynamic_loc_slot_5 = { state_scope = { change_region_name = "Teleri" } }
		}
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_accept_avari } }
			dynamic_loc_slot_6 = { state_scope = { change_region_name = "Avari" } }
		}
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_accept_anduinrim } }
			dynamic_loc_slot_7 = { state_scope = { change_region_name = "Anduinrim" } }
		}
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_accept_rohirrim } }
			dynamic_loc_slot_8 = { state_scope = { change_region_name = "Rohirrim" } }
		}
		
		# Setup Request Return of Cores {
		FROM = {
			all_core = { 
				limit = {
					NOT = { owned_by = FROM }
					owner = { has_country_modifier = alliance_of_dwarves_and_men }
				}
				add_province_modifier = { name = province_target_alliance_men_dwarves_request_return_of_cores duration = 1 }
			}
		}
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				NOT = { tag = FROM }
			}
			all_core = { remove_province_modifier = province_target_alliance_men_dwarves_request_return_of_cores } # The only provinces retaining the modifier are those that are cores of the decision taker, but not of the owner
		}
		# }
		
		# Calculate the number of options that should be shown
		set_variable = { which = menu_option_number value = 1 } # Defaulting to 1 to handle the Exit button. For some reason I decided to not update this to handle "Leave Alliance", so all of the background images are 1 higher than one might expect (given the corresponding value of menu_option_number)
		
		clr_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms
		clr_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu
		clr_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm
		clr_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach
		clr_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu
		clr_global_flag = alliance_of_dwarves_and_men_can_access_economic_union
		clr_global_flag = alliance_of_dwarves_and_men_can_access_political_union
		
		# Call to Arms
		random_owned = {
			limit = {
				FROM = { war = yes }
				owner = {
					any_neighbor_country = {
						has_country_modifier = alliance_of_dwarves_and_men
						war = no
						is_vassal = no # There shouldn't be any. But just in case
					}
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms
			}
		}
		
		# Core Dispute Menu
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_in_voting } # Only want to have the potential for one voting resolution at once
					OR = {
						# Resolve Conflicting Cores
						has_global_flag = alliance_of_dwarves_and_men_conflicting_cores_detected
						# Request Return of Cores
						FROM = { any_core = { has_province_modifier = province_target_alliance_men_dwarves_request_return_of_cores } }
						# Return Cores
						FROM = {
							any_owned_province = {
								NOT = { is_core = FROM }
								any_core = {
									exists = yes
									has_country_modifier = alliance_of_dwarves_and_men
								}
							}
						}
					}
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu
			}
			any_neighbor_province = { remove_province_modifier = province_target_alliance_men_dwarves_request_return_of_cores }
		}
		
		# Invite Realm
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_in_voting } # Only want to have the potential for one voting resolution at once
					any_neighbor_country = {
						capital_scope = { continent = europe } # Rhovanion
						NOT = { has_country_modifier = alliance_of_dwarves_and_men }
						alliance_with = FROM
						war = no
						is_vassal = no
						OR = {
							good_evil_alignment = good_alignment
							good_evil_alignment = neutral_alignment
						}
						OR = {
							is_culture_group = dwarves
							is_culture_group = northmen
							AND = {
								is_culture_group = teleri
								has_global_flag = alliance_of_dwarves_and_men_accept_teleri
							}
							AND = {
								is_culture_group = avari
								has_global_flag = alliance_of_dwarves_and_men_accept_avari
							}
							AND = {
								is_culture_group = anduinrim
								has_global_flag = alliance_of_dwarves_and_men_accept_anduinrim
							}
							AND = {
								is_culture_group = rohirrim
								has_global_flag = alliance_of_dwarves_and_men_accept_rohirrim
							}
						}
					}
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm
			}
		}
		
		# Expand Cultural Reach
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_in_voting } # Only want to have the potential for one voting resolution at once
					any_neighbor_country = {
						rank = 12 # Great or Secondary power
						capital_scope = { continent = europe } # Rhovanion
						NOT = { has_country_modifier = alliance_of_dwarves_and_men }
						alliance_with = FROM
						war = no
						is_vassal = no
						OR = {
							AND = {
								is_culture_group = teleri
								NOT = { has_global_flag = alliance_of_dwarves_and_men_accept_teleri }
							}
							AND = {
								is_culture_group = avari
								NOT = { has_global_flag = alliance_of_dwarves_and_men_accept_avari }
							}
							AND = {
								is_culture_group = anduinrim
								NOT = { has_global_flag = alliance_of_dwarves_and_men_accept_anduinrim }
							}
							AND = {
								is_culture_group = rohirrim
								NOT = { has_global_flag = alliance_of_dwarves_and_men_accept_rohirrim }
							}
						}
					}
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach
			}
		}
		
		# Specific Flavor Menu
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_in_voting } # Only want to have the potential for one voting resolution at once
					FROM = {
						OR = {
							AND = { # Settle the Cores of Dahdrik's Gap
								OR = {
									tag = DAL
									tag = RHO
								}
								ERE = { has_country_modifier = alliance_of_dwarves_and_men }
								OR = {
									primary_culture = adhalling
									accepted_culture = adhalling
								}
								ERE_657 = { # Dádhrik's Gap
									owned_by = ERE
									NOT = { has_province_modifier = alliance_dwarves_men_diplomacy_stalled }
								}
								NOT = { has_global_flag = alliance_of_dwarves_and_men_settled_dadhriks_gap }
							}
							AND = { # Settle the Cores of Mountainlands
								OR = {
									tag = DAL
									tag = RHO
								}
								ERE = { has_country_modifier = alliance_of_dwarves_and_men }
								OR = {
									primary_culture = grammas
									accepted_culture = grammas
								}
								ERE_660 = { # Mountainlands
									owned_by = ERE
									NOT = { has_province_modifier = alliance_dwarves_men_diplomacy_stalled }
								}
								NOT = { has_global_flag = alliance_of_dwarves_and_men_settled_mountainlands }
							}
						}
					}
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu
			}
		}
		
		# Propose an Economic Union
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_in_voting } # Only want to have the potential for one voting resolution at once
					FROM = { is_greater_power = yes }
					NOT = { has_country_modifier = alliance_of_dwarves_and_men_union_countdown }
					NOT = { has_global_flag = alliance_of_dwarves_and_men_economic_union }
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_economic_union
			}
		}
		
		# Propose a Political Union
		random_owned = {
			limit = {
				owner = {
					NOT = { has_global_flag = alliance_of_dwarves_and_men_in_voting } # Only want to have the potential for one voting resolution at once
					FROM = { is_greater_power = yes }
					NOT = { has_country_modifier = alliance_of_dwarves_and_men_union_countdown }
					has_global_flag = alliance_of_dwarves_and_men_economic_union
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_political_union
			}
		}
		# }
		
		# Fire the menu (based upon the number of potential options) for the triggering realm
		random_owned = {
			limit = { owner = { NOT = { check_variable = { which = menu_option_number value = 1.1 } } } }
			owner = { FROM = { country_event = 110000 } }
		}
		
		random_owned = {
			limit = {
				owner = {
					check_variable = { which = menu_option_number value = 1.9 }
					NOT = { check_variable = { which = menu_option_number value = 2.1 } }
				}
			}
			owner = { FROM = { country_event = 110001 } }
		}
		
		random_owned = {
			limit = {
				owner = {
					check_variable = { which = menu_option_number value = 2.9 }
					NOT = { check_variable = { which = menu_option_number value = 3.1 } }
				}
			}
			owner = { FROM = { country_event = 110002 } }
		}
		
		random_owned = {
			limit = {
				owner = {
					check_variable = { which = menu_option_number value = 3.9 }
					NOT = { check_variable = { which = menu_option_number value = 4.1 } }
				}
			}
			owner = { FROM = { country_event = 110003 } }
		}
		
		random_owned = {
			limit = {
				owner = {
					check_variable = { which = menu_option_number value = 4.9 }
					NOT = { check_variable = { which = menu_option_number value = 5.1 } }
				}
			}
			owner = { FROM = { country_event = 110004 } }
		}
		
		random_owned = {
			limit = {
				owner = {
					check_variable = { which = menu_option_number value = 5.9 }
					NOT = { check_variable = { which = menu_option_number value = 6.1 } }
				}
			}
			owner = { FROM = { country_event = 110005 } }
		}
		
		random_owned = {
			limit = {
				owner = { check_variable = { which = menu_option_number value = 6.9 } }
			}
			owner = { FROM = { country_event = 110006 } }
		}
	}
}

# Alliance of Dwarves and Men Call Allies
country_event = {
	id = 110101
	title = "A Call to Arms"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		FROM = {
			
			war = {
				attacker_goal = { casus_belli = call_allies_cb }
				call_ally = yes
				# Audax Validator "." Ignore_NEXT
				target = ---
			}
		}
	}
}

# Alliance of Dwarves and Men Core Dispute Menu Setup/Option Calculator
country_event = {
	id = 110102
	title = "Alliance of Dwarves and Men - Cores Disputes"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Continue"
		
		# Setup Request Return of Cores {
		FROM = {
			all_core = { 
				limit = {
					NOT = { owned_by = FROM }
					owner = { has_country_modifier = alliance_of_dwarves_and_men }
				}
				add_province_modifier = { name = province_target_alliance_men_dwarves_request_return_of_cores duration = 1 }
			}
		}
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				NOT = { tag = FROM }
			}
			all_core = { remove_province_modifier = province_target_alliance_men_dwarves_request_return_of_cores } # The only provinces retaining the modifier are those that are cores of the decision taker, but not of the owner
		}
		# }
		
		# Calculate the number of options that should be shown
		set_variable = { which = menu_option_number value = 1 } # Defaulting to 1 to handle the Exit button
		
		clr_global_flag = alliance_of_dwarves_and_men_can_access_resolve_conflicting_cores
		clr_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores
		clr_global_flag = alliance_of_dwarves_and_men_can_access_return_cores
		
		# Resolve Conflicting Cores
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_conflicting_cores_detected } }
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_resolve_conflicting_cores
			}
		}
		
		# Request Return of Cores
		random_owned = {
			limit = { owner = { FROM = { any_core = { has_province_modifier = province_target_alliance_men_dwarves_request_return_of_cores } } } }
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores
			}
			any_neighbor_province = { remove_province_modifier = province_target_alliance_men_dwarves_request_return_of_cores }
		}
		
		# Return Cores
		random_owned = {
			limit = {
				owner = {
					FROM = {
						any_owned_province = {
							NOT = { is_core = FROM }
							any_core = {
								exists = yes
								has_country_modifier = alliance_of_dwarves_and_men
							}
						}
					}
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_return_cores
			}
		}
		# }
		
		# Fire the menu (based upon the number of potential options) for the triggering realm
		random_owned = {
			limit = {
				owner = { NOT = { check_variable = { which = menu_option_number value = 2.1 } } }
			}
			owner = { FROM = { country_event = 110010 } }
		}
		
		random_owned = {
			limit = {
				owner = {
					check_variable = { which = menu_option_number value = 2.9 }
					NOT = { check_variable = { which = menu_option_number value = 3.1 } }
				}
			}
			owner = { FROM = { country_event = 110011 } }
		}
		
		random_owned = {
			limit = {
				owner = { check_variable = { which = menu_option_number value = 3.9 } }
			}
			owner = { FROM = { country_event = 110012 } }
		}
	}
}

# Alliance of Dwarves and Men Core Region Callback
country_event = {
	id = 110103
	title = "Alliance of Dwarves and Men - Region Callback"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Continue"
		
		# When there are more than 8 options, we want to display the last option as "Next"
		random_country = {
			limit = {
				tag = FOR
				check_variable = { which = dynamic_loc_region_count value = 8.9 }
			}
			dynamic_loc_slot_8 = { state_scope = { change_region_name = "§BNext§!" } }
		}
		
		# Cannot use FROM as country_event = { id = [id] days = 0 } resets FROM to the realm that got the event fired via this syntax. When setting the dynamic loc names, a bunch of events are called for FOR this way to ensure that the player doesn't need to wait a tick to see the loced names
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_region_count value = 0.9 }
					NOT = { check_variable = { which = dynamic_loc_region_count value = 1.1 } }
				}
			}
			country_event = 110020
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_region_count value = 1.9 }
					NOT = { check_variable = { which = dynamic_loc_region_count value = 2.1 } }
				}
			}
			country_event = 110021
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_region_count value = 2.9 }
					NOT = { check_variable = { which = dynamic_loc_region_count value = 3.1 } }
				}
			}
			country_event = 110022
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_region_count value = 3.9 }
					NOT = { check_variable = { which = dynamic_loc_region_count value = 4.1 } }
				}
			}
			country_event = 110023
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_region_count value = 4.9 }
					NOT = { check_variable = { which = dynamic_loc_region_count value = 5.1 } }
				}
			}
			country_event = 110024
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_region_count value = 5.9 }
					NOT = { check_variable = { which = dynamic_loc_region_count value = 6.1 } }
				}
			}
			country_event = 110025
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_region_count value = 6.9 }
					NOT = { check_variable = { which = dynamic_loc_region_count value = 7.1 } }
				}
			}
			country_event = 110026
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = { check_variable = { which = dynamic_loc_region_count value = 7.9 } }
			}
			country_event = 110027
		}
	}
}

# Alliance of Dwarves and Men Core Country Callback
country_event = {
	id = 110104
	title = "Alliance of Dwarves and Men - Country Callback"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Continue"
		
		# When there are more than 8 options, we want to display the last option as "Next"
		random_country = {
			limit = {
				tag = FOR
				check_variable = { which = dynamic_loc_country_count value = 8.9 }
			}
			dynamic_loc_slot_8 = { state_scope = { change_region_name = "§BNext§!" } }
		}
		
		# Cannot use FROM as country_event = { id = [id] days = 0 } resets FROM to the realm that got the event fired via this syntax. When setting the dynamic loc names, a bunch of events are called for FOR this way to ensure that the player doesn't need to wait a tick to see the loced names
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_country_count value = 0.9 }
					NOT = { check_variable = { which = dynamic_loc_country_count value = 1.1 } }
				}
			}
			country_event = 110030
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_country_count value = 1.9 }
					NOT = { check_variable = { which = dynamic_loc_country_count value = 2.1 } }
				}
			}
			country_event = 110031
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_country_count value = 2.9 }
					NOT = { check_variable = { which = dynamic_loc_country_count value = 3.1 } }
				}
			}
			country_event = 110032
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_country_count value = 3.9 }
					NOT = { check_variable = { which = dynamic_loc_country_count value = 4.1 } }
				}
			}
			country_event = 110033
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_country_count value = 4.9 }
					NOT = { check_variable = { which = dynamic_loc_country_count value = 5.1 } }
				}
			}
			country_event = 110034
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_country_count value = 5.9 }
					NOT = { check_variable = { which = dynamic_loc_country_count value = 6.1 } }
				}
			}
			country_event = 110035
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = {
					check_variable = { which = dynamic_loc_country_count value = 6.9 }
					NOT = { check_variable = { which = dynamic_loc_country_count value = 7.1 } }
				}
			}
			country_event = 110036
		}
		
		random_country = {
			limit = {
				has_country_flag = alliance_dwarves_men_voting_initiator
				FOR = { check_variable = { which = dynamic_loc_country_count value = 7.9 } }
			}
			country_event = 110037
		}
	}
}

# Alliance of Dwarves and Men Specific Flavor Menu Setup/Option Calculator
country_event = {
	id = 110105
	title = "Alliance of Dwarves and Men - Specific Flavor"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Continue"
		
		# Calculate the number of options that should be shown
		set_variable = { which = menu_option_number value = 1 } # Defaulting to 1 to handle the Exit button.
		
		clr_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_dahdriks_gap
		clr_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands
		
		# Settle the Cores of Dahdrik's Gap
		random_owned = {
			limit = {
				owner = {
					FROM = {
						OR = {
							tag = DAL
							tag = RHO
						}
						ERE = { has_country_modifier = alliance_of_dwarves_and_men }
						OR = {
							primary_culture = adhalling
							accepted_culture = adhalling
						}
						ERE_657 = { # Dádhrik's Gap
							owned_by = ERE
							NOT = { has_province_modifier = alliance_dwarves_men_diplomacy_stalled }
						}
						NOT = { has_global_flag = alliance_of_dwarves_and_men_settled_dadhriks_gap }
					}
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_dahdriks_gap
			}
		}
		
		# Settle the Cores of Mountainlands
		random_owned = {
			limit = {
				owner = {
					FROM = {
						OR = {
							tag = DAL
							tag = RHO
						}
						ERE = { has_country_modifier = alliance_of_dwarves_and_men }
						OR = {
							primary_culture = grammas
							accepted_culture = grammas
						}
						ERE_660 = { # Mountainlands
							owned_by = ERE
							NOT = { has_province_modifier = alliance_dwarves_men_diplomacy_stalled }
						}
						NOT = { has_global_flag = alliance_of_dwarves_and_men_settled_mountainlands }
					}
				}
			}
			owner = {
				change_variable = { which = menu_option_number value = 1 }
				set_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands
			}
		}
		
		# Fire the menu (based upon the number of potential options) for the triggering realm. We can assume that there is at least one option, as the only way to enter this menu is via passing through at least one option's condtions
		random_owned = {
			limit = {
				owner = { NOT = { check_variable = { which = menu_option_number value = 2.1 } } }
			}
			owner = { FROM = { country_event = 110040 } }
		}
		
		random_owned = {
			limit = {
				owner = { check_variable = { which = menu_option_number value = 2.9 } }
			}
			owner = { FROM = { country_event = 110041 } }
		}
	}
}

# Alliance of Dwarves and Men Cleanup
country_event = {
	id = 110110
	title = "Alliance of Dwarves and Men Cleanup"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Clean up"
		
		FOR = {
			random_owned = { any_neighbor_province = { remove_province_modifier = alliance_dwarves_men_selected_region } }
			set_variable = { which = alliance_dwarves_men_total_for value = 0 }
			set_variable = { which = alliance_dwarves_men_total_abstained value = 0 }
			set_variable = { which = alliance_dwarves_men_total_against value = 0 }
		}
		any_country = {
			clr_country_flag = alliance_dwarves_men_selected_country
			clr_country_flag = alliance_dwarves_men_voting_initiator
			clr_global_flag = alliance_of_dwarves_and_men_can_access_call_to_arms
			clr_global_flag = alliance_of_dwarves_and_men_can_access_core_dispute_menu
			clr_global_flag = alliance_of_dwarves_and_men_can_access_invite_realm
			clr_global_flag = alliance_of_dwarves_and_men_can_access_expand_cultural_reach
			clr_global_flag = alliance_of_dwarves_and_men_can_access_specific_flavor_menu
			clr_global_flag = alliance_of_dwarves_and_men_can_access_economic_union
			clr_global_flag = alliance_of_dwarves_and_men_can_access_political_union
			clr_global_flag = alliance_of_dwarves_and_men_can_access_resolve_conflicting_cores
			clr_global_flag = alliance_of_dwarves_and_men_can_access_request_return_of_cores
			clr_global_flag = alliance_of_dwarves_and_men_can_access_return_cores
			clr_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_dahdriks_gap
			clr_global_flag = alliance_of_dwarves_and_men_can_access_settle_cores_of_mountainlands
			clr_global_flag = alliance_of_dwarves_and_men_voting_on_invite_realm
			clr_global_flag = alliance_of_dwarves_and_men_voting_on_expand_cultural_reach
			clr_global_flag = alliance_of_dwarves_and_men_voting_on_economic_union
			clr_global_flag = alliance_of_dwarves_and_men_in_voting
			clr_country_flag = alliance_dwarves_men_voted_for
			clr_country_flag = alliance_dwarves_men_abstained
			clr_country_flag = alliance_dwarves_men_voted_against
		}
	}
}

# Voting Handler
country_event = {
	id = 110150
	title = "Alliance of Dwarves and Men Voting Handler"
	desc = ""
	picture = "organization/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Fire Voting"
		
		set_global_flag = alliance_of_dwarves_and_men_in_voting
		
		random_country = {
			limit = { has_country_flag = alliance_dwarves_men_voting_initiator } # The "aggressor"
			country_event = { id = 110151 days = 3 } # The strategy that the initator will use to influence the AI TODO: Make
		}
		
		random_country = {
			limit = { has_country_flag = alliance_dwarves_men_selected_country } # The "defender"
			country_event = { id = 110151 days = 3 } # The strategy that the defender will use to influence the AI TODO: Make
		}
		
		country_event = { id = 110152 days = 7 } # Handler 2
	}
}

# Voting Handler 2 -- sets the initiator's loc to country slot 1
country_event = {
	id = 110152
	title = "Alliance of Dwarves and Men Voting Handler 2"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Fire Voting"
		
		country_event = { id = 110175 days = 0 } # Voting Loc Setting
		
		# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
		# Cannot call 400000 as it will not fire in the necessary order
		any_country = {
			clr_country_flag = dynamic_loc_potential_country_target
			clr_country_flag = dynamic_loc_country_target_1
		}
		
		set_variable = { which = dynamic_loc_country_count value = 0 }
		
		# Resets the naming count
		set_variable = { which = dynamic_loc_names_country value = 0 }
	
		random_country = {
			limit = { has_country_flag = alliance_dwarves_men_voting_initiator }
			FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
			set_country_flag = dynamic_loc_potential_country_target
		}
		
		country_event = 300000 # Country Loc Setting
		
		country_event = 110161 # Hander 3
	}
}

# Voting Handler 3 -- sets the defender's loc to country slot 2
country_event = {
	id = 110161
	title = "Alliance of Dwarves and Men Voting Handler 3"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Fire Voting"
		
		country_event = { id = 110175 days = 0 } # Voting Loc Setting
		
		# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
		# Cannot call 400000 as it will not fire in the necessary order
		any_country = {
			clr_country_flag = dynamic_loc_potential_country_target
			clr_country_flag = dynamic_loc_country_target_1
		}
		
		set_variable = { which = dynamic_loc_country_count value = 1 }
		
		# Resets the naming count
		set_variable = { which = dynamic_loc_names_country value = 1 } # First already set by aggressor
	
		random_country = {
			limit = { has_country_flag = alliance_dwarves_men_selected_country }
			FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
			set_country_flag = dynamic_loc_potential_country_target
		}
		
		country_event = 300000 # Country Loc Setting
		
		country_event = 110162 # Hander 4
	}
}

# Voting Handler 4 -- sets the defender's culture group to country group slot 2
country_event = {
	id = 110162
	title = "Alliance of Dwarves and Men Voting Handler 4"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Fire Voting"
		
		country_event = { id = 110175 days = 0 } # Voting Loc Setting
		
		# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
		# Cannot call 400000 as it will not fire in the necessary order
		any_country = {
			clr_country_flag = dynamic_loc_potential_country_target
			clr_country_flag = dynamic_loc_country_target_1
		}
		
		set_variable = { which = dynamic_loc_culture_group_count value = 2 }
		
		# Resets the naming count
		set_variable = { which = dynamic_loc_names_culture_group value = 2 } # First two already set by countries
	
		random_country = {
			limit = { has_country_flag = alliance_dwarves_men_selected_country }
			FOR = { change_variable = { which = dynamic_loc_culture_group_count value = 1 } }
			set_country_flag = dynamic_loc_potential_culture_group_target
		}
		
		country_event = 300002 # Culture Group Loc Setting
		
		country_event = 110153 # Hander 5 (to make sure that loc shows up correctly)
	}
}

# Voting Handler 5
country_event = {
	id = 110153
	title = "Alliance of Dwarves and Men Voting Handler 4"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Fire Voting"
		
		# Reset the voting count
		set_variable = { which = alliance_dwarves_men_voting_results value = 0 }
		set_variable = { which = alliance_dwarves_men_total_for value = 0 }
		set_variable = { which = alliance_dwarves_men_total_abstained value = 0 }
		set_variable = { which = alliance_dwarves_men_total_against value = 0 }
		
		any_country = {
			limit = {
				has_country_modifier = alliance_of_dwarves_and_men
				is_vassal = no # There shouldn't be any. But just in case
			}
			country_event = 110154
		}
	}
}

# Individual Voting
country_event = {
	id = 110154
	title = "  Alliance of Dwarves and Men Voting"
	desc = ""
	picture = "organizations/alliance_dwarves_men_3"
	
	is_triggered_only = yes
	
	immediate = {
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_invite_realm } }
			end_color_loc = {}
			railroading_tag_specific_description_loc_1 = {}
			dynamic_loc_slot_1 = {}
			railroading_tag_specific_description_loc_2 = {}
			dynamic_loc_slot_2 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			railroading_tag_specific_description_loc_3 = {}
			dynamic_loc_slot_2 = {}
			railroading_tag_specific_description_loc_4 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			empty_line_loc = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_10 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_11 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_12 = {}
			empty_line_loc = {}
			
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_expand_cultural_reach } }
			end_color_loc = {}
			railroading_tag_specific_description_loc_1 = {}
			dynamic_loc_slot_1 = {}
			railroading_tag_specific_description_loc_2 = {}
			dynamic_loc_slot_2 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			railroading_tag_specific_description_loc_3 = {}
			dynamic_loc_slot_3 = {}
			railroading_tag_specific_description_loc_4 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			empty_line_loc = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_10 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_11 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_12 = {}
			empty_line_loc = {}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_economic_union } }
			end_color_loc = {}
			railroading_tag_specific_description_loc_1 = {}
			dynamic_loc_slot_1 = {}
			railroading_tag_specific_description_loc_2 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			railroading_tag_specific_description_loc_3 = {}
			railroading_tag_specific_description_loc_4 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_10 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_11 = {}
			empty_line_loc = {}
			
			empty_line_loc = {}
			dynamic_loc_slot_12 = {}
			empty_line_loc = {}
		}
	}
	
	option = {
		name = ""
		
		# Vote for
		FOR = {
			change_variable = { which = alliance_dwarves_men_voting_results value = 1 }
			change_variable = { which = alliance_dwarves_men_total_for value = 1 }
		}
		set_country_flag = alliance_dwarves_men_voted_for
		
		random_owned = {
			limit = { owner = { has_country_flag = alliance_dwarves_men_voting_initiator } }
			owner = { FOR = { country_event = 110155 } } # Calculate the results
		}
		
		ai_chance = {
			factor = 33
		}
	}
	
	option = {
		name = ""
		
		# Doesn't vote
		FOR = { change_variable = { which = alliance_dwarves_men_total_abstained value = 1 } }
		set_country_flag = alliance_dwarves_men_abstained
		
		random_owned = {
			limit = { owner = { has_country_flag = alliance_dwarves_men_voting_initiator } }
			owner = { FOR = { country_event = 110155 } } # Calculate the results
		}
		
		ai_chance = {
			factor = 33
		}
	}
	
	option = {
		name = ""
		
		# Vote against
		FOR = {
			change_variable = { which = alliance_dwarves_men_voting_results value = -1 }
			change_variable = { which = alliance_dwarves_men_total_against value = 1 }
		}
		set_country_flag = alliance_dwarves_men_voted_against
		
		random_owned = {
			limit = { owner = { has_country_flag = alliance_dwarves_men_voting_initiator } }
			owner = { FOR = { country_event = 110155 } } # Calculate the results
		}
		
		ai_chance = {
			factor = 33
		}
	}
}

# Calculating Vote 1 -- countries 1 - 8 (for)
country_event = {
	id = 110155
	title = "  Alliance of Dwarves and Men Calculating Vote 1"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = ""
		
		# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
		# Cannot call 400000 as it will not fire in the necessary order
		any_country = {
			clr_country_flag = dynamic_loc_potential_country_target
			clr_country_flag = dynamic_loc_country_target_1
			clr_country_flag = dynamic_loc_country_target_2
			clr_country_flag = dynamic_loc_country_target_3
			clr_country_flag = dynamic_loc_country_target_4
			clr_country_flag = dynamic_loc_country_target_5
			clr_country_flag = dynamic_loc_country_target_6
			clr_country_flag = dynamic_loc_country_target_7
			clr_country_flag = dynamic_loc_country_target_8
		}
		
		set_variable = { which = dynamic_loc_country_count value = 0 }
		
		# Resets the naming count
		set_variable = { which = dynamic_loc_names_country value = 0 }
	
		any_country = {
			limit = { has_country_flag = alliance_dwarves_men_voted_for }
			FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
			set_country_flag = dynamic_loc_potential_country_target
		}
		
		country_event = 300000 # Country Loc Setting
		
		country_event = 110156 # Calculating Vote 2
	}
}

# Calculating Vote 2 -- countries 9 - 16 (abstain)
country_event = {
	id = 110156
	title = "  Alliance of Dwarves and Men Calculating Vote 2"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = ""
		
		# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
		# Cannot call 400000 as it will not fire in the necessary order
		any_country = {
			clr_country_flag = dynamic_loc_potential_country_target
			clr_country_flag = dynamic_loc_country_target_9
			clr_country_flag = dynamic_loc_country_target_10
			clr_country_flag = dynamic_loc_country_target_11
			clr_country_flag = dynamic_loc_country_target_12
			clr_country_flag = dynamic_loc_country_target_13
			clr_country_flag = dynamic_loc_country_target_14
			clr_country_flag = dynamic_loc_country_target_15
			clr_country_flag = dynamic_loc_country_target_16
		}
		
		set_variable = { which = dynamic_loc_country_count value = 8 }
		
		# Resets the naming count
		set_variable = { which = dynamic_loc_names_country value = 8 }
	
		any_country = {
			limit = { has_country_flag = alliance_dwarves_men_abstained }
			FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
			set_country_flag = dynamic_loc_potential_country_target
		}
		
		country_event = 300000 # Country Loc Setting
		
		country_event = 110157 # Calculating Vote 3
	}
}

# Calculating Vote 3 -- countries 17 - 24 (against)
country_event = {
	id = 110157
	title = "  Alliance of Dwarves and Men Calculating Vote 3"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = ""
		
		# Clears modifiers on the already selected regions (if the player hits "next", they definitely aren't attempting to choose any of the listed regions)
		# Cannot call 400000 as it will not fire in the necessary order
		any_country = {
			clr_country_flag = dynamic_loc_potential_country_target
			clr_country_flag = dynamic_loc_country_target_17
			clr_country_flag = dynamic_loc_country_target_18
			clr_country_flag = dynamic_loc_country_target_19
			clr_country_flag = dynamic_loc_country_target_20
			clr_country_flag = dynamic_loc_country_target_21
			clr_country_flag = dynamic_loc_country_target_22
			clr_country_flag = dynamic_loc_country_target_23
			clr_country_flag = dynamic_loc_country_target_24
		}
		
		set_variable = { which = dynamic_loc_country_count value = 16 }
		
		# Resets the naming count
		set_variable = { which = dynamic_loc_names_country value = 16 }
	
		any_country = {
			limit = { has_country_flag = alliance_dwarves_men_voted_against }
			FOR = { change_variable = { which = dynamic_loc_country_count value = 1 } }
			set_country_flag = dynamic_loc_potential_country_target
		}
		
		country_event = 300000 # Country Loc Setting
		
		country_event = 110158 # Calculating Vote 4 (to make sure that loc shows up correctly)
	}
}

# Calculating Vote 4 -- description and firing for the player(s)
country_event = {
	id = 110158
	title = "  Alliance of Dwarves and Men Calculating Vote 4"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = ""
		
		railroading_tag_specific_description_loc_1 = { state_scope = { change_region_name = "The vote is in! With a vote of" } }
		railroading_tag_specific_description_loc_2 = { state_scope = { change_region_name = ", the resolution to" } }
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_invite_realm } }
			owner = { railroading_tag_specific_description_loc_3 = { state_scope = { change_region_name = "invite a new realm" } } }
		}
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_expand_cultural_reach } }
			owner = { railroading_tag_specific_description_loc_3 = { state_scope = { change_region_name = "expand the alliance's cultural reach" } } }
		}
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_economic_union } }
			owner = { railroading_tag_specific_description_loc_3 = { state_scope = { change_region_name = "create an economic union" } } }
		}
		random_owned = {
			limit = { owner = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } } }
			owner = { railroading_tag_specific_description_loc_4 = { state_scope = { change_region_name = "has passed!" } } }
		}
		random_owned = {
			limit = { owner = { NOT = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } } } }
			owner = { railroading_tag_specific_description_loc_4 = { state_scope = { change_region_name = "has failed!" } } }
		}
		railroading_tag_specific_description_loc_5 = { state_scope = { change_region_name = "The following realms voted for the resolution|" } }
		railroading_tag_specific_description_loc_6 = { state_scope = { change_region_name = "The following realms voted against the resolution|" } }
		railroading_tag_specific_description_loc_7 = { state_scope = { change_region_name = "The following realms abstained|" } }
		dynamic_loc_slot_31 = { state_scope = { change_region_name = "Good" } } # First 24 are taken by countries
		dynamic_loc_slot_32 = { state_scope = { change_region_name = "Drat" } }
		dynamic_loc_slot_33 = { state_scope = { change_region_name = "Okay" } }
		
		any_country = {
			limit = {
				ai = no
				has_country_modifier = alliance_of_dwarves_and_men
			}
			country_event = 110159 # The results
		}
	}
}

# Voting Results
country_event = {
	id = 110159
	title = "  Alliance of Dwarves and Men Voting Results"
	desc = ""
	picture = "organizations/alliance_dwarves_men_1"
	
	is_triggered_only = yes
	
	immediate = {
		end_color_loc = {}
		railroading_tag_specific_description_loc_1 = {}
		
		random_owned = {
			limit = { owner = { FOR = { NOT = { check_variable = { which = alliance_dwarves_men_total_for value = 0.9 } } } } }
			zero_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_for value = 0.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_for value = 1.1 } }
					}
				}
			}
			one_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_for value = 1.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_for value = 2.1 } }
					}
				}
			}
			two_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_for value = 2.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_for value = 3.1 } }
					}
				}
			}
			three_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_for value = 3.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_for value = 4.1 } }
					}
				}
			}
			four_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_for value = 4.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_for value = 5.1 } }
					}
				}
			}
			five_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_for value = 5.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_for value = 6.1 } }
					}
				}
			}
			six_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_for value = 6.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_for value = 7.1 } }
					}
				}
			}
			seven_loc = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 7.9 } } } }
			eight_loc = {}
		}
		
		hyphen_loc = {}
		
		random_owned = {
			limit = { owner = { FOR = { NOT = { check_variable = { which = alliance_dwarves_men_total_against value = 0.9 } } } } }
			zero_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_against value = 0.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_against value = 1.1 } }
					}
				}
			}
			one_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_against value = 1.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_against value = 2.1 } }
					}
				}
			}
			two_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_against value = 2.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_against value = 3.1 } }
					}
				}
			}
			three_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_against value = 3.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_against value = 4.1 } }
					}
				}
			}
			four_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_against value = 4.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_against value = 5.1 } }
					}
				}
			}
			five_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_against value = 5.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_against value = 6.1 } }
					}
				}
			}
			six_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_against value = 6.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_against value = 7.1 } }
					}
				}
			}
			seven_loc = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 7.9 } } } }
			eight_loc = {}
		}
		
		hyphen_loc = {}
		
		random_owned = {
			limit = { owner = { FOR = { NOT = { check_variable = { which = alliance_dwarves_men_total_abstained value = 0.9 } } } } }
			zero_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_abstained value = 0.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_abstained value = 1.1 } }
					}
				}
			}
			one_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_abstained value = 1.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_abstained value = 2.1 } }
					}
				}
			}
			two_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_abstained value = 2.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_abstained value = 3.1 } }
					}
				}
			}
			three_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_abstained value = 3.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_abstained value = 4.1 } }
					}
				}
			}
			four_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_abstained value = 4.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_abstained value = 5.1 } }
					}
				}
			}
			five_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_abstained value = 5.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_abstained value = 6.1 } }
					}
				}
			}
			six_loc = {}
		}
		random_owned = {
			limit = {
				owner = {
					FOR = {
						check_variable = { which = alliance_dwarves_men_total_abstained value = 6.9 }
						NOT = { check_variable = { which = alliance_dwarves_men_total_abstained value = 7.1 } }
					}
				}
			}
			seven_loc = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 7.9 } } } }
			eight_loc = {}
		}
		
		railroading_tag_specific_description_loc_2 = {}
		railroading_tag_specific_description_loc_3 = {}
		railroading_tag_specific_description_loc_4 = {}
		empty_line_loc = {}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_5 = {}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 0.9 } } } }
			dynamic_loc_slot_1 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 1.9 } } } }
			dynamic_loc_slot_2 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 2.9 } } } }
			dynamic_loc_slot_3 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 3.9 } } } }
			dynamic_loc_slot_4 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 4.9 } } } }
			dynamic_loc_slot_5 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 5.9 } } } }
			dynamic_loc_slot_6 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 6.9 } } } }
			dynamic_loc_slot_7 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 7.9 } } } }
			dynamic_loc_slot_8 = {}
		}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_6 = {}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 0.9 } } } }
			dynamic_loc_slot_17 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 1.9 } } } }
			dynamic_loc_slot_18 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 2.9 } } } }
			dynamic_loc_slot_19 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 3.9 } } } }
			dynamic_loc_slot_20 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 4.9 } } } }
			dynamic_loc_slot_21 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 5.9 } } } }
			dynamic_loc_slot_22 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 6.9 } } } }
			dynamic_loc_slot_23 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 7.9 } } } }
			dynamic_loc_slot_24 = {}
		}
		
		empty_line_loc = {}
		railroading_tag_specific_description_loc_7 = {}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 0.9 } } } }
			dynamic_loc_slot_9 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 1.9 } } } }
			dynamic_loc_slot_10 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 2.9 } } } }
			dynamic_loc_slot_11 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 3.9 } } } }
			dynamic_loc_slot_12 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 4.9 } } } }
			dynamic_loc_slot_13 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 5.9 } } } }
			dynamic_loc_slot_14 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 6.9 } } } }
			dynamic_loc_slot_15 = {}
		}
		random_owned = {
			limit = { owner = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 7.9 } } } }
			dynamic_loc_slot_16 = {}
		}
		
		# 3 realms is enough to kick each list into the second line. We only want the extra whitespace when there's only one line
		random_owned = {
			limit = { owner = { NOT = { FOR = { check_variable = { which = alliance_dwarves_men_total_for value = 2.9 } } } } }
			empty_line_loc = {}
		}
		
		# 3 realms is enough to kick each list into the second line. We only want the extra whitespace when there's only one line
		random_owned = {
			limit = { owner = { NOT = { FOR = { check_variable = { which = alliance_dwarves_men_total_abstained value = 2.9 } } } } }
			empty_line_loc = {}
		}
		
		# 3 realms is enough to kick each list into the second line. We only want the extra whitespace when there's only one line
		random_owned = {
			limit = { owner = { NOT = { FOR = { check_variable = { which = alliance_dwarves_men_total_against value = 2.9 } } } } }
			empty_line_loc = {}
		}
		
		# Some proposals are short enough to stay on one line
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_invite_realm } }
			empty_line_loc = {}
		}
		
		empty_line_loc = {}
		
		random_owned = {
			limit = {
				owner = {
					OR = {
						AND = {
							has_country_flag = alliance_dwarves_men_voted_for
							FOR = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } }
						}
						AND = {
							has_country_flag = alliance_dwarves_men_voted_against
							NOT = { FOR = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } } }
						}
					}
				}
			}
			dynamic_loc_slot_31 = {}
		}
		
		random_owned = {
			limit = {
				owner = {
					OR = {
						AND = {
							has_country_flag = alliance_dwarves_men_voted_for
							NOT = { FOR = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } } }
						}
						AND = {
							has_country_flag = alliance_dwarves_men_voted_against
							FOR = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } }
						}
					}
				}
			}
			dynamic_loc_slot_32 = {}
		}
		
		random_owned = {
			limit = {
				owner = {
					NOT = { has_country_flag = alliance_dwarves_men_voted_for }
					NOT = { has_country_flag = alliance_dwarves_men_voted_against }
				}
			}
			dynamic_loc_slot_33 = {}
		}
	}
	
	option = {
		name = ""
		
		FOR = { country_event = 110110 } # Alliance of Dwarves and Men Cleanup
		FOR = { country_event = 402001 } # Dynamic Loc Cleanup
		
		random_owned = {
			limit = {
				owner = {
					has_global_flag = alliance_of_dwarves_and_men_voting_on_invite_realm
					FOR = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } }
				}
			}
			owner = {
				random_country = {
					limit = { has_country_flag = alliance_dwarves_men_selected_country }
					country_event = 110163
				}
			}
		}
		
		random_owned = {
			limit = {
				owner = {
					has_global_flag = alliance_of_dwarves_and_men_voting_on_expand_cultural_reach
					FOR = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } }
				}
			}
			owner = {
				random_country = {
					limit = {
						has_country_flag = alliance_dwarves_men_selected_country
						is_culture_group = teleri
					}
					country_event = 110163
					set_global_flag = alliance_of_dwarves_and_men_accept_teleri
				}
				random_country = {
					limit = {
						has_country_flag = alliance_dwarves_men_selected_country
						is_culture_group = avari
					}
					country_event = 110163
					set_global_flag = alliance_of_dwarves_and_men_accept_avari
				}
				random_country = {
					limit = {
						has_country_flag = alliance_dwarves_men_selected_country
						is_culture_group = anduinrim
					}
					country_event = 110163
					set_global_flag = alliance_of_dwarves_and_men_accept_anduinrim
				}
				random_country = {
					limit = {
						has_country_flag = alliance_dwarves_men_selected_country
						is_culture_group = rohirrim
					}
					country_event = 110163
					set_global_flag = alliance_of_dwarves_and_men_accept_rohirrim
				}
			}
		}
		
		random_owned = {
			limit = {
				owner = {
					has_global_flag = alliance_of_dwarves_and_men_voting_on_economic_union
					FOR = { check_variable = { which = alliance_dwarves_men_voting_results value = 0.1 } }
				}
			}
			owner = {
				set_global_flag = alliance_of_dwarves_and_men_economic_union
				
				random_owned = {
					limit = { owner = { part_of_sphere = yes } }
					owner = { country_event = 110160 } # Remove from sphere + add to sphere of GP alliance member
				}
				
				any_country = {
					limit = {
						has_country_modifier = alliance_of_dwarves_and_men
						is_greater_power = no
					}
					country_event = 110160 # Remove from sphere + add to sphere of GP alliance member
				}
			}
		}
	}
}

# Removing from sphere (Economic Union successful)
country_event = {
	id = 110160
	title = "Alliance of Dwarves and Men Economic Union"
	desc = ""
	picture = "organizations/alliance_dwarves_men_1"
	
	is_triggered_only = yes
	
	option = {
		name = "The Economic Union Demands it"
		
		sphere_owner = { diplomatic_influence = { who = THIS value = -200 } }
		
		random_country = {
			limit = {
				is_greater_power = yes
				has_country_modifier = alliance_of_dwarves_and_men
				is_culture_group = THIS
				rank = 1
			}
			diplomatic_influence = { who = THIS value = 400 }
		}
		
		random_country = {
			limit = {
				THIS = { part_of_sphere = no }
				is_greater_power = yes
				has_country_modifier = alliance_of_dwarves_and_men
				is_culture_group = THIS
				rank = 2
			}
			diplomatic_influence = { who = THIS value = 400 }
		}
		
		random_country = {
			limit = {
				THIS = { part_of_sphere = no }
				is_greater_power = yes
				has_country_modifier = alliance_of_dwarves_and_men
				is_culture_group = THIS
				rank = 3
			}
			diplomatic_influence = { who = THIS value = 400 }
		}
		
		random_country = {
			limit = {
				THIS = { part_of_sphere = no }
				is_greater_power = yes
				has_country_modifier = alliance_of_dwarves_and_men
				is_culture_group = THIS
				rank = 4
			}
			diplomatic_influence = { who = THIS value = 400 }
		}
		
		random_country = {
			limit = {
				THIS = { part_of_sphere = no }
				is_greater_power = yes
				has_country_modifier = alliance_of_dwarves_and_men
				rank = 1
			}
			diplomatic_influence = { who = THIS value = 400 }
		}
		
		random_country = {
			limit = {
				THIS = { part_of_sphere = no }
				is_greater_power = yes
				has_country_modifier = alliance_of_dwarves_and_men
				rank = 2
			}
			diplomatic_influence = { who = THIS value = 400 }
		}
		
		random_country = {
			limit = {
				THIS = { part_of_sphere = no }
				is_greater_power = yes
				has_country_modifier = alliance_of_dwarves_and_men
				rank = 3
			}
			diplomatic_influence = { who = THIS value = 400 }
		}
		
		random_country = {
			limit = {
				THIS = { part_of_sphere = no }
				is_greater_power = yes
				has_country_modifier = alliance_of_dwarves_and_men
				rank = 4
			}
			diplomatic_influence = { who = THIS value = 400 }
		}
	}
}

# 110161 and 110162 used above. DO NOT USE AGAIN

# Invitation to the Alliance
country_event = {
	id = 110163
	title = "  An Invitation to the Alliance of Dwarves and Men"
	desc = ""
	picture = "organizations/alliance_dwarves_men_2"
	
	is_triggered_only = yes
	
	option = {
		name = "Yes, we accept"
		add_country_modifier = { name = alliance_of_dwarves_and_men duration = -1 }
		
		ai_chance = { factor = 100 }
	}
	
	option = {
		name = "No, we are strong on our own"
		# TODO: Something about not being able to join/be invited for 10 years
		
		ai_chance = { factor = 0 }
	}
}

# Description Localisation Setting
country_event = {
	id = 110175
	title = "Alliance of Dwarves and Men Localisation Setter"
	desc = ""
	picture = "organizations/alliance_dwarves_men"
	
	is_triggered_only = yes
	
	option = {
		name = "Set loc"
		
		railroading_tag_specific_description_loc_1 = { state_scope = { change_region_name = "After many days of deliberation, the time to vote has come. The" } }
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_invite_realm } }
			owner = {
				railroading_tag_specific_description_loc_2 = { state_scope = { change_region_name = "has proposed inviting the" } }
				railroading_tag_specific_description_loc_3 = { state_scope = { change_region_name = "§MThis will invite the" } }
				railroading_tag_specific_description_loc_4 = { state_scope = { change_region_name = "to the alliance. Assuming they accept, they will become full alliance members, being able to vote in all issues.§!" } }
				dynamic_loc_slot_10 = { state_scope = { change_region_name = "There is strength in unity" } } # First two slots taken up by countries. Third taken up by culture group
				dynamic_loc_slot_11 = { state_scope = { change_region_name = "We will abstain" } }
				dynamic_loc_slot_12 = { state_scope = { change_region_name = "No. Inviting a new realm will only weaken the alliance" } }
			}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_expand_cultural_reach } }
			owner = {
				railroading_tag_specific_description_loc_2 = { state_scope = { change_region_name = "has proposed expanding our cultural reach by inviting the" } }
				railroading_tag_specific_description_loc_3 = { state_scope = { change_region_name = "§MThis will add the" } }
				railroading_tag_specific_description_loc_4 = { state_scope = { change_region_name = "culture group to the list of the Alliance's accepted culture groups, allowing us to more easily invite realms within the culture group.§!" } }
				dynamic_loc_slot_10 = { state_scope = { change_region_name = "There is strength in unity" } } # First two slots taken up by countries. Third taken up by culture group
				dynamic_loc_slot_11 = { state_scope = { change_region_name = "We will abstain" } }
				dynamic_loc_slot_12 = { state_scope = { change_region_name = "No. Extending the cultural reach will only weaken the alliance" } }
			}
		}
		
		random_owned = {
			limit = { owner = { has_global_flag = alliance_of_dwarves_and_men_voting_on_economic_union } }
			owner = {
				railroading_tag_specific_description_loc_2 = { state_scope = { change_region_name = "has proposed an economic union." } }
				railroading_tag_specific_description_loc_3 = { state_scope = { change_region_name = "§MThis will lock all alliance members into the sphere of the GPs within the alliance. If there are multiple GPs, alliance members will prefer to be in the sphere of a realm of their culture group.§!" } }
				railroading_tag_specific_description_loc_4 = { state_scope = { change_region_name = "§MIf there are any ties, rank will be the deciding factor.§!" } }
				dynamic_loc_slot_10 = { state_scope = { change_region_name = "An economic union can only bring prosperity for all" } } # First two slots taken up by countries. Third taken up by culture group
				dynamic_loc_slot_11 = { state_scope = { change_region_name = "We will abstain" } }
				dynamic_loc_slot_12 = { state_scope = { change_region_name = "This is clearly a play at gaining power over us" } }
			}
		}
	}
}